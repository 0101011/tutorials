.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5293,  7.7161,  7.4160, 11.1243,  7.0526],
            [ 6.9379,  5.7015,  2.5864,  4.5906, 12.8551],
            [ 5.6855,  4.6899, 11.2477,  8.3918,  7.0447],
            [ 5.5653,  4.2874,  4.5672, 10.6437,  9.0809],
            [ 9.9007,  7.5251,  2.2075,  5.5181, 18.0146],
            [ 5.5653,  9.2969,  7.7782,  9.7484,  9.0809],
            [ 5.6855,  4.4933,  1.8903, 10.8897,  7.0447],
            [ 6.9379,  5.5942,  7.8906,  9.3576, 12.8551]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 1.3176,  0.4659,  1.2747, -1.8601,  1.5999,  0.2488,  1.8434,  0.2738],
            [-1.9297,  2.3426, -1.1086, -0.0428,  0.5330, -0.2163, -0.5701, -0.1211],
            [ 0.5671, -0.4656, -0.9296, -1.1387,  0.7620,  0.0923,  0.8479,  1.0955],
            [-1.7147,  0.1600,  0.4748,  0.3029, -1.4022,  0.6983, -0.5531,  0.0952],
            [-3.2866,  1.4287, -0.3337, -0.5549,  0.9904, -0.1718,  1.2125,  0.2195],
            [-0.8957, -0.3602, -0.5551, -0.3254, -0.3275,  1.4724, -1.1810,  0.4939],
            [-0.0468, -0.4401,  0.3379, -0.5161, -1.4127, -0.0125, -0.1607,  0.4378],
            [ 0.4773, -1.0327, -0.6386,  0.0719, -0.3737, -0.5883,  0.3906,  0.2089]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1823,  0.2024, -0.1600],
            [-1.5595,  0.2866,  0.1597],
            [-0.4646, -0.1196,  1.1252]], requires_grad=True), Parameter containing:
    tensor([[0.0720]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4244,  3.7060,  3.5235, -0.9459, -1.9185,  2.7395,  2.8132,  0.2288],
            [-0.2036,  1.2801,  2.0232, -4.2955, -4.0101, -1.1694,  0.1800,  1.4884],
            [-0.7859,  0.8075,  0.4599, -0.7150, -0.8738, -1.5706, -0.1915,  1.8279],
            [ 0.1773, -1.2682, -0.2674,  1.6692,  0.3792,  1.0534, -0.3603,  0.7008],
            [ 5.0889,  1.0217, -0.0557,  3.8095,  0.5213, -1.0299, -2.3501, -3.2600],
            [ 3.6225,  3.0958, -2.0979,  1.7026,  1.7193, -2.2783, -1.2921,  0.9065],
            [-0.1224, -0.7056,  0.0782, -3.7423,  2.2328,  2.8289, -0.1373, -0.6261],
            [-2.9606,  2.1083, -0.4467, -3.9785,  1.2125,  7.3838,  0.1841,  0.1303]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1844, -0.0323, -0.0442, -1.0395, -2.4376,  0.7533,  0.5446, -1.9113,
             -0.3147,  0.2418],
            [-0.8231,  0.1267,  0.9371,  0.9439,  3.8083, -2.0637, -1.2883,  1.9474,
             -0.3772, -0.1807],
            [ 1.1330,  0.6961, -0.1222,  0.1369, -0.8369, -1.1581, -1.7174,  2.7048,
              0.2079, -1.8571],
            [ 3.7719, -0.3299, -1.5186,  1.9163,  0.0206, -0.4539,  2.1739, -0.5424,
             -0.6821, -0.3969],
            [-3.2356, -1.0025,  0.9513,  1.6875, -0.0846,  1.0036, -0.6097, -4.3235,
             -0.8064,  1.0774],
            [-2.2970, -1.8695,  1.4570,  2.6278,  3.4568,  0.7740,  0.3321,  0.2090,
             -0.7082,  0.3515],
            [ 1.4571, -0.0096, -2.2591,  1.0864, -1.1271,  0.6796,  1.3486,  2.2956,
             -0.8635, -2.4574],
            [-2.8864,  1.8171,  0.0836, -0.8347, -0.6953, -1.3475,  2.8029,  2.3220,
             -0.2040, -1.6790],
            [ 2.2114, -1.2677, -0.2576,  0.1427, -1.8108,  0.1974,  0.3159,  0.9812,
              0.7125, -0.8708],
            [ 0.7625, -0.0936, -2.2350,  0.7572,  0.3598, -0.3049,  0.9135, -0.3723,
              0.4223, -0.0050]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.271 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
