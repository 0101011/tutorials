.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.2916, 18.5965,  8.2038,  6.8248, 10.9094],
            [ 4.8261,  1.4832,  6.7968,  4.0518,  6.7805],
            [ 3.7466,  9.5554,  4.6292,  9.2872,  5.6854],
            [ 2.8753,  8.0466, 11.6727,  8.6119,  6.0589],
            [ 9.2938,  7.7409,  4.1134,  6.3825,  0.3707],
            [ 2.8753,  7.2476,  5.5237,  6.9226,  6.0589],
            [ 3.7466,  4.3485,  7.0698,  7.2834,  5.6854],
            [ 4.8261,  7.4499, 11.9328,  7.6912,  6.7805]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.5544, -1.0280,  1.9429,  0.4027,  0.3469, -0.4838,  0.2521,  0.7411],
            [-0.4901, -0.2186,  2.1805, -0.0839,  1.0572, -0.1614, -0.1646, -1.6817],
            [ 0.0216, -0.4061,  0.5093,  1.0358, -1.4020, -1.0539,  0.2380, -0.4901],
            [ 0.7763, -1.2278,  1.1866,  0.9884,  0.2158, -0.4429, -0.1291,  0.2168],
            [ 2.2445,  0.4654, -1.0408, -0.2120, -0.1087, -1.2457, -0.0332, -0.7667],
            [ 0.0072,  0.2650,  0.4455,  1.4551,  1.6908, -0.6731, -1.2160,  0.5158],
            [-1.0266,  0.5547,  1.2622,  0.3496, -0.3945, -0.4814, -0.1231, -0.5168],
            [ 1.9170,  1.0324,  2.1509,  1.2264, -1.6620,  0.5714, -0.9996, -0.4556]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.5532,  0.4578,  0.4111],
            [ 0.3113, -0.2438, -0.8290],
            [ 0.6691, -0.8234, -2.2498]], requires_grad=True), Parameter containing:
    tensor([[-0.4955]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.9815,  3.0433, -1.4372, -7.4770,  4.5602,  6.1446,  1.7691,  3.0363],
            [-7.0119, -3.2718,  1.4268,  3.1634,  2.1695, -3.3378,  3.9038,  2.9896],
            [-2.8726,  0.5785,  0.8106,  4.0625, -0.3598, -1.7560,  1.6952,  2.1057],
            [ 0.2840, -1.9961, -6.4347, -2.5350, -0.4748,  6.1420, -0.9120, -2.4657],
            [-5.6975, -4.2685, -1.9474, -1.0826,  0.5781,  0.0143, -2.0543,  4.2199],
            [-1.3133, -5.6734,  2.9293,  3.3960, -4.3383, -0.0275,  0.2981,  1.8554],
            [ 5.7669,  1.6657, -8.6658, -4.3970, -1.1671,  4.5276, -2.0507, -0.6193],
            [ 3.8096,  8.5906,  2.5941, -8.0770,  0.0773,  0.1244, -2.6718,  0.4469]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.6596,  1.4801, -2.0340,  0.5168,  3.6676, -0.8965, -1.7271, -1.6858,
              0.7314,  0.4838],
            [-1.5127,  1.1639,  0.6100, -0.5148,  1.6778, -1.8844,  0.0036,  0.5243,
              0.1452, -0.7060],
            [-0.8966, -0.2180,  6.0685, -0.7627, -4.5402, -0.1921,  6.3066,  1.6202,
             -2.9890, -3.3657],
            [ 0.5819, -3.6764, -1.4589,  3.2230,  2.1572, -0.3939,  2.8397, -7.2323,
             -3.7389, -0.7457],
            [-2.0853,  0.1917, -3.0097,  3.3495,  5.8123, -2.0391, -1.6548, -6.8218,
             -1.3825,  0.5709],
            [ 1.2525,  0.0889, -2.4753, -5.3853,  0.7115,  2.8994,  4.4033, -2.2902,
             -1.7310, -2.4749],
            [ 1.6866, -0.8596, -5.7883, -1.6838,  3.2811,  2.8302,  0.3729, -0.8142,
             -3.0512, -2.8985],
            [-1.4181, -0.9499,  1.2414,  3.0594, -5.5178, -4.1639,  6.3562,  3.5654,
             -1.1670, -2.1070],
            [-0.1223,  0.4435,  1.5060, -1.4704, -4.5933,  0.2829,  4.0116, -0.1769,
             -1.2826,  1.0972],
            [ 0.4230,  0.2451, -1.9641, -3.7843,  0.7555,  1.9371, -5.6688, -3.5721,
              1.6326,  1.6625]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.289 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
