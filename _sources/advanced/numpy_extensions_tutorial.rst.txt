.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.1442,  8.6624,  3.7826, 10.6031, 18.8671],
            [ 9.4240,  8.2969,  6.8398,  6.8753,  3.3940],
            [ 6.5101,  6.1532, 13.1093,  1.6758,  4.7996],
            [ 3.9662,  8.7724,  2.3811,  4.7034,  7.2501],
            [ 3.8750,  1.1876,  4.1503,  9.9178,  3.3126],
            [ 3.9662,  5.5254,  3.1989,  5.1600,  7.2501],
            [ 6.5101,  2.3363,  7.3513,  4.5535,  4.7996],
            [ 9.4240,  5.8745,  2.8994,  4.4403,  3.3940]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 1.4401,  0.8923,  0.4332,  0.3797,  0.3049,  1.4626, -0.6551, -0.0494],
            [ 0.0484,  0.5626, -0.1187, -0.4793, -0.5373,  1.0187, -0.2656,  2.6416],
            [ 0.2960,  0.5643, -0.0708,  0.7494, -0.5707,  0.0712, -0.0949,  1.0061],
            [ 0.5768,  1.1416,  1.3386, -1.6413,  0.6239,  0.6750, -0.2925,  0.9355],
            [ 0.4222,  0.3911, -1.1299,  0.1662, -0.1407,  0.6240,  0.1369,  1.3830],
            [-2.2168,  0.2519,  0.3367,  0.2012,  0.0522, -1.4360, -0.5358,  0.0202],
            [-1.0584,  0.9358,  0.8882,  0.5622, -0.8858, -0.2187, -0.8554,  0.6301],
            [ 0.2837,  1.6535, -0.1938, -0.7579,  0.1142,  1.0039, -1.0354,  0.1648]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1580, -1.2077,  0.5583],
            [ 1.6439,  0.5947, -0.5048],
            [ 0.0448, -0.0443, -1.1178]], requires_grad=True), Parameter containing:
    tensor([[0.7582]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.4044,  3.1910,  0.5702,  1.6234, -0.4746, -1.7683, -2.3675,  7.7492],
            [-4.4444,  3.9397,  0.3734, -3.1114, -0.3563,  2.9096, -0.1634,  0.0038],
            [-0.7505, -1.9636, -0.0992, -1.9873,  1.0259,  0.2241,  3.4052,  0.1986],
            [ 4.0890, -4.3592,  3.8878,  4.2464,  6.8831,  0.6259,  2.5442,  3.8751],
            [ 4.3516, -4.6651, -0.0411, -1.3601,  1.5590,  0.7690, -4.2805,  0.4351],
            [-0.2360,  1.8517,  0.3050,  4.4967, -4.3513,  4.3381,  1.4293,  1.8851],
            [-0.3079,  5.4447, -4.1327, -0.0613,  4.0601, -0.1044,  1.2412, -0.3632],
            [-3.2696,  2.1071,  3.9278, -2.0560,  2.1295, -3.8992, -0.0440,  4.6924]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1414, -1.3230,  2.1785,  0.3107,  0.4115,  1.2502, -1.4840,  0.2140,
             -1.0018,  0.5195],
            [ 1.4629, -1.8980, -3.5363, -0.7334, -3.3816,  0.7235,  2.4931, -0.3468,
              1.4557, -0.6673],
            [ 0.1222, -1.2142,  0.2225,  0.2400,  3.6638,  0.4041,  1.3526, -1.0711,
             -0.6255, -0.7357],
            [ 1.9172, -2.5945,  1.0393, -0.5282,  0.4787, -0.5157,  3.5780,  1.7451,
             -3.6043,  1.0960],
            [ 2.2462,  1.1723, -2.2745, -3.7908, -2.8662,  2.4968,  0.7590,  0.7863,
             -0.7580, -0.7699],
            [-0.0261,  0.5896,  0.0405,  5.0331,  1.8167, -2.3928, -1.2383,  2.0867,
             -0.4725, -1.2924],
            [ 0.0538, -0.1225, -2.6049, -2.8749,  1.5214,  3.2546, -0.1522,  0.1864,
              0.3643, -0.5634],
            [ 2.0927,  2.1307,  4.4999, -1.0686, -1.1557, -1.9106,  0.1353,  1.0412,
             -1.3409, -0.9659],
            [ 1.6875, -1.9402, -3.3665, -2.1728, -0.6056,  0.8964,  2.0991,  1.7992,
             -1.0323, -1.1061],
            [ 0.0445, -0.1137, -1.0587,  1.7333,  0.4418,  0.5262, -0.5002, -0.4038,
             -0.1895, -0.8612]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.279 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
