.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating extensions using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.3354,  3.3759, 19.6222,  3.0192,  1.8757],
            [ 4.1274, 10.1012,  9.9278,  5.7589,  9.7529],
            [10.1309, 17.1995,  8.9805,  3.1978, 17.5057],
            [14.8934,  2.7728,  8.6971,  2.8683,  5.8673],
            [ 7.1131,  2.7596,  5.6465, 10.1435,  9.9633],
            [14.8934,  8.3125,  5.9429, 14.0854,  5.8673],
            [10.1309, 11.6965,  3.5199, 12.6994, 17.5057],
            [ 4.1274,  5.7418, 10.0117,  3.3541,  9.7529]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.3771, -0.9571,  1.0013,  0.7974, -0.2265, -0.6136, -0.3741,  0.1006],
            [ 1.3560, -2.8539, -0.8828, -0.2017,  0.8056, -1.6460, -0.2339, -0.2129],
            [ 0.8881, -1.0588,  0.0493,  1.4870,  0.7005, -0.4247,  0.3781,  1.5689],
            [-0.3735,  2.2017,  0.1461, -0.3856, -0.5896,  0.1755, -1.3296,  0.9479],
            [ 1.2231,  0.5482,  0.0638,  0.1631, -1.6721,  0.5749, -3.0640,  0.1484],
            [ 1.7950, -0.5068, -1.9050, -0.0835,  1.1460, -0.2761,  2.5980, -0.3022],
            [-1.5348, -0.5648, -0.8402, -0.2009,  0.3461, -0.6677, -0.4698,  1.8642],
            [ 1.0810,  0.4862,  0.7858,  3.7777,  1.6833, -0.2104, -0.6983,  0.4303]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.as_tensor(grad_input, dtype=input.dtype), torch.as_tensor(grad_filter, dtype=filter.dtype), torch.as_tensor(grad_bias, dtype=bias.dtype)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1496,  0.0278, -1.9807],
            [ 0.4263, -0.4317, -1.8227],
            [ 0.6593,  0.8101, -0.9442]], requires_grad=True), Parameter containing:
    tensor([[-0.5840]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.5786,  2.7354,  7.2520, -6.7006, -5.4804,  1.2406, -2.0828, -1.7069],
            [ 0.2135,  1.6253,  1.7229, -2.1410, -8.3648,  1.2116, -3.1966, -5.8421],
            [ 0.8870,  1.2561, -1.7053,  1.3682, -6.6593,  0.7975, -0.9717, -1.3280],
            [ 4.0555,  0.7871, -4.8102,  2.6335, -5.7905, -4.3908,  0.1334, -3.6382],
            [ 1.1174,  1.1646, -1.6921,  1.7334, -4.9511, -3.6013,  1.8056, -2.9490],
            [-0.1440, -2.6644,  2.7108,  5.3779, -3.9895,  1.4542,  3.3793, -2.1039],
            [ 0.0873, -0.7874,  1.2132,  3.0178, -0.4401,  5.8304, -0.8958, -2.2144],
            [-1.0184, -5.2934, -3.2072, -1.4269,  3.1390,  0.9869, -2.7469, -3.8021]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3197, -0.0170, -4.4295,  0.9726,  2.3468, -0.0636,  1.3812,  1.4023,
             -1.9913, -1.3519],
            [ 0.6885, -1.1946, -1.3320,  1.5138,  3.0352,  1.5097,  0.2220,  0.2499,
             -2.6771, -0.6311],
            [ 0.6745,  2.1866,  0.5753, -2.9281,  3.6120, -3.9900, -0.7578, -0.7790,
              0.5363,  3.1135],
            [-1.1547, -0.1844,  0.1856, -4.1316, -2.7875, -4.3094, -1.2998, -2.1222,
              0.6300,  3.7465],
            [-0.2679,  0.4509,  1.8999, -2.0412,  1.2108, -3.0354,  0.9392, -4.8121,
             -4.9179,  0.4739],
            [ 0.1294,  1.6618,  2.4761,  1.2783, -1.3393,  1.9905, -1.8592, -1.7899,
             -3.7911, -2.4479],
            [-0.6480, -0.8825,  1.7154, -3.6239, -3.2133, -2.4484,  2.7107,  0.9056,
             -1.7910, -3.1873],
            [-0.5602,  1.0771,  7.4011,  0.4935, -2.8985, -2.2828,  0.3472,  1.3846,
             -2.6868,  2.9137],
            [-1.5656,  0.4329,  5.7168,  2.4240,  1.1024, -3.9734,  2.5059,  0.6259,
             -0.9941,  3.7191],
            [-1.4592, -1.9599,  1.4530,  0.0064,  1.1193, -0.9377, -0.2491,  0.3526,
             -3.0296,  2.2407]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.277 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
