.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.9033, 12.7741,  3.0419,  5.4689,  2.4691],
            [ 5.4324, 13.4095,  7.0176,  5.6910,  8.2021],
            [ 2.7346,  4.4637,  6.1606,  5.3706,  6.5462],
            [ 7.3446,  8.2659,  5.7242, 11.3878,  9.0647],
            [14.0700, 14.5157, 10.8893,  6.4875,  5.3382],
            [ 7.3446,  6.3979,  4.5807,  4.9044,  9.0647],
            [ 2.7346,  1.8361,  0.8990,  6.9106,  6.5462],
            [ 5.4324,  5.9868,  3.2170,  3.3473,  8.2021]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.7131, -0.4908, -0.5342, -0.9301,  0.4085,  0.3332, -1.0304,  0.8100],
            [-0.3562, -0.2253,  0.9816,  1.5502, -0.4184, -0.7728, -0.5804, -2.4699],
            [-0.9046, -0.2137, -0.6774, -1.2936,  0.1098, -0.3031,  0.0766,  0.5662],
            [-0.5587, -0.4520, -0.1692, -0.3178,  0.9847,  0.2596,  0.1597, -0.6739],
            [ 0.8528, -2.6525, -0.4174, -0.8992,  0.2814, -1.3614, -0.2234,  0.4030],
            [-0.1863, -0.1975,  0.2699,  0.1594,  0.2367,  1.4924,  1.4160,  0.8342],
            [-0.7914, -1.4507, -1.6321,  0.8006, -0.9393,  0.3803, -0.0766,  0.5257],
            [-1.0499, -0.5126,  1.8538,  0.1374,  0.6440,  1.4653, -0.7338, -1.6867]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8419,  1.3215,  0.0518],
            [ 1.2929, -1.1194,  1.4985],
            [ 1.0695, -0.3667, -0.4919]], requires_grad=True), Parameter containing:
    tensor([[0.0104]], requires_grad=True)]
    Output from the convolution:  tensor([[  1.0881,  -0.9703,   6.2144,  -4.3541, -10.0235,   1.8267,  -1.5296,
               3.2360],
            [  3.0478,   0.5952,  -1.8773,   6.5561,   2.0459,  -1.4278,  -0.8174,
              -0.7925],
            [ -2.6629,   3.8218,  -2.0609,  -0.8190,   1.5839,   3.4636,   3.8175,
               1.2169],
            [ -0.8318,   3.5342,   2.0474,   5.4807,   0.2029,  -1.2233,  -0.0384,
               3.2580],
            [  2.4918,   1.9391,  -0.8724,   0.7712,  -4.1889,  -0.5214,   0.6968,
               0.4194],
            [  2.9992,  -1.1286,  -3.8286,   0.4331,  -2.7922,  -5.6069,  -0.9220,
               1.2074],
            [  4.1508,  -1.2738,  -1.6345,  -2.2370,  -3.4699,   0.0784,   0.0286,
              -2.6439],
            [ -2.5333,   2.0503,   0.1487,   1.3430,  -1.0030,   0.3329,   3.5740,
              -1.1482]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2404,  0.6153,  2.6969,  1.3110, -0.3886,  1.8493,  1.4002, -2.3678,
             -2.5203, -0.0974],
            [-1.1359,  0.0879, -1.2535, -1.9984,  1.3351,  0.7174,  0.8061,  0.5931,
              1.8097, -2.7925],
            [-2.6326, -1.3350, -1.0936, -1.6418,  1.0187,  4.8842, -5.9433,  1.2063,
             -1.6335,  1.6512],
            [-2.4913,  0.0891,  0.7475, -2.3503,  0.6826,  3.4545, -1.0045, -2.5589,
              1.9492, -2.0428],
            [ 0.0188,  0.7526,  0.4392, -0.9979,  0.4107, -5.3036,  2.1370, -2.0596,
              0.5593,  0.7681],
            [ 2.4043, -0.9566, -0.6046,  3.1536,  1.9083, -4.2590,  6.6873,  1.5862,
              5.3787,  0.3303],
            [ 4.1726,  1.3935, -4.0881, -0.8322, -0.1170,  4.5507,  3.2771,  4.4416,
             -3.3123,  4.2741],
            [ 3.0092, -5.1739,  3.1541,  4.3656, -6.9367,  0.0888, -0.1819, -0.1012,
              0.0196, -2.9891],
            [ 1.4861, -0.1111, -4.2952, -0.2382,  2.7541,  0.2602, -3.5468, -0.1251,
             -1.9602,  0.5604],
            [-1.0402,  0.8464,  1.3239, -1.7737, -1.2253,  0.9393, -0.9556,  0.5586,
              0.6765, -0.0175]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.274 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
