

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning tutorial
==========================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train your network using
transfer learning. You can read more about the transfer learning at `cs231n
notes <http://cs231n.github.io/transfer-learning/>`__

Quoting this notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios looks as follows:

-  **Finetuning the convnet**: Instead of random initializaion, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.




.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.autograd import Variable
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import copy
    import os

    plt.ion()   # interactive mode







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.



.. code-block:: python


    # Data augmentation and normalization for training 
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomSizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Scale(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    dsets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x])
             for x in ['train', 'val']}
    dset_loaders = {x: torch.utils.data.DataLoader(dsets[x], batch_size=4,
                                                   shuffle=True, num_workers=4)
                    for x in ['train', 'val']}
    dset_sizes = {x: len(dsets[x]) for x in ['train', 'val']}
    dset_classes = dsets['train'].classes

    use_gpu = torch.cuda.is_available()








Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.



.. code-block:: python


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dset_loaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[dset_classes[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :align: center




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving (deep copying) the best model

In the following, parameter ``lr_scheduler(optimizer, epoch)``
is a function  which modifies ``optimizer`` so that the learning
rate is changed according to desired schedule.



.. code-block:: python


    def train_model(model, criterion, optimizer, lr_scheduler, num_epochs=25):
        since = time.time()

        best_model = model
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    optimizer = lr_scheduler(optimizer, epoch)
                    model.train(True)  # Set model to training mode
                else:
                    model.train(False)  # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for data in dset_loaders[phase]:
                    # get the inputs
                    inputs, labels = data

                    # wrap them in Variable
                    if use_gpu:
                        inputs, labels = Variable(inputs.cuda()), \
                            Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.data[0]
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dset_sizes[phase]
                epoch_acc = running_corrects / dset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model = copy.deepcopy(model)

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))
        return best_model







Learning rate scheduler
^^^^^^^^^^^^^^^^^^^^^^^
Let's create our learning rate scheduler. We will exponentially
decrease the learning rate once every few epochs.



.. code-block:: python


    def exp_lr_scheduler(optimizer, epoch, init_lr=0.001, lr_decay_epoch=7):
        """Decay learning rate by a factor of 0.1 every lr_decay_epoch epochs."""
        lr = init_lr * (0.1**(epoch // lr_decay_epoch))

        if epoch % lr_decay_epoch == 0:
            print('LR is set to {}'.format(lr))

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr

        return optimizer








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images




.. code-block:: python


    def visualize_model(model, num_images=6):
        images_so_far = 0
        fig = plt.figure()

        for i, data in enumerate(dset_loaders['val']):
            inputs, labels = data
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)

            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(dset_classes[labels.data[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    return







Finetuning the convnet
----------------------

Load a pretrained model and reset final fully connected layer.




.. code-block:: python


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_ft = model_ft.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)







Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.




.. code-block:: python


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    LR is set to 0.001
    train Loss: 0.1436 Acc: 0.6639
    val Loss: 0.0580 Acc: 0.9346

    Epoch 1/24
    ----------
    train Loss: 0.1018 Acc: 0.8033
    val Loss: 0.0564 Acc: 0.9216

    Epoch 2/24
    ----------
    train Loss: 0.1478 Acc: 0.7705
    val Loss: 0.0731 Acc: 0.9020

    Epoch 3/24
    ----------
    train Loss: 0.1210 Acc: 0.8115
    val Loss: 0.0532 Acc: 0.9150

    Epoch 4/24
    ----------
    train Loss: 0.1008 Acc: 0.8238
    val Loss: 0.1033 Acc: 0.8824

    Epoch 5/24
    ----------
    train Loss: 0.1443 Acc: 0.7828
    val Loss: 0.0996 Acc: 0.7974

    Epoch 6/24
    ----------
    train Loss: 0.0938 Acc: 0.8402
    val Loss: 0.0586 Acc: 0.9281

    Epoch 7/24
    ----------
    LR is set to 0.0001
    train Loss: 0.0891 Acc: 0.8770
    val Loss: 0.0582 Acc: 0.9281

    Epoch 8/24
    ----------
    train Loss: 0.0841 Acc: 0.8525
    val Loss: 0.0809 Acc: 0.9216

    Epoch 9/24
    ----------
    train Loss: 0.0782 Acc: 0.8811
    val Loss: 0.0458 Acc: 0.9281

    Epoch 10/24
    ----------
    train Loss: 0.0710 Acc: 0.8770
    val Loss: 0.0483 Acc: 0.9216

    Epoch 11/24
    ----------
    train Loss: 0.0929 Acc: 0.8238
    val Loss: 0.0451 Acc: 0.9281

    Epoch 12/24
    ----------
    train Loss: 0.0682 Acc: 0.9016
    val Loss: 0.0526 Acc: 0.9281

    Epoch 13/24
    ----------
    train Loss: 0.0758 Acc: 0.8484
    val Loss: 0.0428 Acc: 0.9412

    Epoch 14/24
    ----------
    LR is set to 1.0000000000000003e-05
    train Loss: 0.0534 Acc: 0.9139
    val Loss: 0.0563 Acc: 0.9216

    Epoch 15/24
    ----------
    train Loss: 0.0698 Acc: 0.8893
    val Loss: 0.0449 Acc: 0.9281

    Epoch 16/24
    ----------
    train Loss: 0.0692 Acc: 0.8811
    val Loss: 0.0450 Acc: 0.9412

    Epoch 17/24
    ----------
    train Loss: 0.0883 Acc: 0.8402
    val Loss: 0.0443 Acc: 0.9346

    Epoch 18/24
    ----------
    train Loss: 0.0683 Acc: 0.8811
    val Loss: 0.0423 Acc: 0.9412

    Epoch 19/24
    ----------
    train Loss: 0.0665 Acc: 0.8852
    val Loss: 0.0561 Acc: 0.9150

    Epoch 20/24
    ----------
    train Loss: 0.0456 Acc: 0.9344
    val Loss: 0.0443 Acc: 0.9412

    Epoch 21/24
    ----------
    LR is set to 1.0000000000000002e-06
    train Loss: 0.0712 Acc: 0.8730
    val Loss: 0.0560 Acc: 0.9281

    Epoch 22/24
    ----------
    train Loss: 0.0645 Acc: 0.8730
    val Loss: 0.0430 Acc: 0.9281

    Epoch 23/24
    ----------
    train Loss: 0.0570 Acc: 0.8975
    val Loss: 0.0470 Acc: 0.9346

    Epoch 24/24
    ----------
    train Loss: 0.0929 Acc: 0.8689
    val Loss: 0.0486 Acc: 0.9281

    Training complete in 3m 16s
    Best val Acc: 0.941176



.. code-block:: python


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :align: center




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_conv = model_conv.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opoosed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    LR is set to 0.001
    train Loss: 0.1413 Acc: 0.7090
    val Loss: 0.0640 Acc: 0.9281

    Epoch 1/24
    ----------
    train Loss: 0.1366 Acc: 0.7295
    val Loss: 0.0565 Acc: 0.9216

    Epoch 2/24
    ----------
    train Loss: 0.1051 Acc: 0.7951
    val Loss: 0.0594 Acc: 0.9085

    Epoch 3/24
    ----------
    train Loss: 0.1177 Acc: 0.7787
    val Loss: 0.1006 Acc: 0.8170

    Epoch 4/24
    ----------
    train Loss: 0.1371 Acc: 0.7336
    val Loss: 0.0454 Acc: 0.9477

    Epoch 5/24
    ----------
    train Loss: 0.0994 Acc: 0.8320
    val Loss: 0.0493 Acc: 0.9477

    Epoch 6/24
    ----------
    train Loss: 0.1663 Acc: 0.7582
    val Loss: 0.0384 Acc: 0.9542

    Epoch 7/24
    ----------
    LR is set to 0.0001
    train Loss: 0.0769 Acc: 0.8607
    val Loss: 0.0408 Acc: 0.9608

    Epoch 8/24
    ----------
    train Loss: 0.0847 Acc: 0.8361
    val Loss: 0.0420 Acc: 0.9542

    Epoch 9/24
    ----------
    train Loss: 0.0897 Acc: 0.8402
    val Loss: 0.0401 Acc: 0.9542

    Epoch 10/24
    ----------
    train Loss: 0.0803 Acc: 0.8566
    val Loss: 0.0451 Acc: 0.9542

    Epoch 11/24
    ----------
    train Loss: 0.0875 Acc: 0.8484
    val Loss: 0.0467 Acc: 0.9412

    Epoch 12/24
    ----------
    train Loss: 0.0898 Acc: 0.8525
    val Loss: 0.0418 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.0909 Acc: 0.8238
    val Loss: 0.0434 Acc: 0.9477

    Epoch 14/24
    ----------
    LR is set to 1.0000000000000003e-05
    train Loss: 0.0998 Acc: 0.8197
    val Loss: 0.0472 Acc: 0.9477

    Epoch 15/24
    ----------
    train Loss: 0.0846 Acc: 0.8566
    val Loss: 0.0430 Acc: 0.9542

    Epoch 16/24
    ----------
    train Loss: 0.0756 Acc: 0.8811
    val Loss: 0.0570 Acc: 0.9346

    Epoch 17/24
    ----------
    train Loss: 0.0824 Acc: 0.8893
    val Loss: 0.0424 Acc: 0.9542

    Epoch 18/24
    ----------
    train Loss: 0.0817 Acc: 0.8525
    val Loss: 0.0413 Acc: 0.9542

    Epoch 19/24
    ----------
    train Loss: 0.0976 Acc: 0.8320
    val Loss: 0.0417 Acc: 0.9542

    Epoch 20/24
    ----------
    train Loss: 0.1229 Acc: 0.7951
    val Loss: 0.0415 Acc: 0.9542

    Epoch 21/24
    ----------
    LR is set to 1.0000000000000002e-06
    train Loss: 0.0827 Acc: 0.8689
    val Loss: 0.0439 Acc: 0.9542

    Epoch 22/24
    ----------
    train Loss: 0.0909 Acc: 0.8443
    val Loss: 0.0429 Acc: 0.9542

    Epoch 23/24
    ----------
    train Loss: 0.0965 Acc: 0.7992
    val Loss: 0.0430 Acc: 0.9542

    Epoch 24/24
    ----------
    train Loss: 0.0725 Acc: 0.8852
    val Loss: 0.0416 Acc: 0.9542

    Training complete in 0m 47s
    Best val Acc: 0.960784



.. code-block:: python


    visualize_model(model_conv)

    plt.ioff()
    plt.show()



.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :align: center




**Total running time of the script:** ( 4 minutes  10.771 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
