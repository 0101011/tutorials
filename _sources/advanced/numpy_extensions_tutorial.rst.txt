.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.5765, 11.4672,  5.0640,  7.1603,  7.2819],
            [ 4.3715,  2.8204,  7.6215,  2.7411,  8.3884],
            [ 7.0827, 10.1287,  6.0101,  6.3741,  2.3224],
            [ 6.2888,  7.0839,  9.0395,  5.6739,  2.1106],
            [ 2.4156,  2.8373, 12.8767,  2.9058,  3.7848],
            [ 6.2888,  4.3879,  7.8635,  7.2756,  2.1106],
            [ 7.0827,  6.3636,  5.7654,  3.8483,  2.3224],
            [ 4.3715,  2.7812,  3.9308, 12.7245,  8.3884]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.2864,  2.3817,  0.8398, -0.8738, -0.0584,  0.3285, -0.7606, -0.5927],
            [-0.6438, -0.0177, -0.0095,  0.1950,  0.1600, -0.2538, -0.6083,  0.1313],
            [-1.1012, -0.2842, -1.3236,  0.3388,  0.8259,  0.8503, -2.1634, -0.4968],
            [-0.8470,  0.2038,  2.0386,  1.4593, -1.2787,  0.7966, -0.3659, -0.5543],
            [ 1.3252, -0.3200, -0.2468, -0.1067, -1.1133,  0.7367, -0.5965, -0.6166],
            [-0.5950, -0.7513,  0.5546,  0.7194, -0.1619, -1.3037, -0.0087,  0.1505],
            [-0.1448, -0.8587, -0.4343,  0.3579, -1.1705,  0.5900,  0.1443, -2.1657],
            [-0.3846, -0.6242, -0.6871,  0.0882, -0.1795, -0.1964, -0.1478, -1.4588]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1213, -0.2301,  0.3457],
            [-0.9644, -0.0494, -0.2043],
            [ 0.5157, -1.0301,  0.9570]], requires_grad=True), Parameter containing:
    tensor([[-0.5229]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.5719,  1.8512, -0.8379, -1.5966,  2.1719, -0.4320, -2.0232,  1.3046],
            [-1.1093,  0.8060, -0.8975, -1.7383,  2.5779,  0.0694,  0.5795,  1.4015],
            [ 3.1375, -0.9248, -0.3124, -5.3302, -2.1306, -0.6892, -0.7809, -0.6590],
            [ 2.4016, -1.2142,  0.4055, -0.2710, -4.7598,  0.8214, -1.3822,  1.8498],
            [-1.8151,  0.5179, -0.0623, -0.8799, -2.1103, -1.5759,  2.7276, -0.7332],
            [ 4.6841, -2.8741, -1.9909,  0.5305, -1.3255, -1.0578, -1.6915, -0.7794],
            [-0.0461, -1.3012, -4.7925,  1.7372, -0.2914, -2.3928, -2.8031,  0.2174],
            [-3.2833, -2.4193, -2.4612, -0.3009,  3.7264, -4.1263,  0.4688, -2.8610]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3626,  0.8462,  1.1222, -0.5779, -0.0836,  2.1335,  0.9272,  0.7905,
              0.0530, -0.3818],
            [ 0.3953,  1.3088,  1.3535, -0.9414, -1.8199,  0.0343,  0.0712,  1.8375,
              0.5445,  0.1522],
            [ 1.2783,  3.3565,  1.7013,  0.4366, -5.5382, -1.7810, -0.2672,  0.6598,
              1.0984, -1.7713],
            [ 3.1329,  3.0573, -1.6769, -0.8876, -1.0924, -0.1963,  0.8547,  1.8906,
              1.0450,  0.2624],
            [ 0.9081,  0.0789, -2.0363, -1.7845, -2.2192, -2.4053,  2.4045, -1.7071,
              2.7541, -2.0961],
            [ 0.1886,  0.8673, -0.5222, -3.6779,  0.7051,  0.3230,  0.5956, -1.5116,
             -0.1279,  0.3345],
            [ 1.2394, -0.5261, -0.2655, -1.0533,  0.1440, -1.0600, -0.9733,  0.4049,
              0.1923, -0.4778],
            [-0.8555,  1.4299, -0.7056,  0.3809, -0.9202,  0.1200,  0.3515,  1.3541,
             -0.2536,  0.6822],
            [-0.3413,  0.5412, -0.0244,  0.9095, -0.5827,  0.7370,  0.5682, -0.3367,
              2.0129, -0.7437],
            [ 0.1619, -0.5056,  0.4511, -0.0441, -0.0395, -0.5551,  0.3203, -0.5187,
              0.7889, -0.9072]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.289 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
