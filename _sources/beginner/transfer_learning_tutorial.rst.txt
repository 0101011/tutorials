

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning tutorial
==========================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train your network using
transfer learning. You can read more about the transfer learning at `cs231n
notes <http://cs231n.github.io/transfer-learning/>`__

Quoting this notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios looks as follows:

-  **Finetuning the convnet**: Instead of random initializaion, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.




.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.autograd import Variable
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import copy
    import os

    plt.ion()   # interactive mode







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.



.. code-block:: python


    # Data augmentation and normalization for training 
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomSizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Scale(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    dsets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x])
             for x in ['train', 'val']}
    dset_loaders = {x: torch.utils.data.DataLoader(dsets[x], batch_size=4,
                                                   shuffle=True, num_workers=4)
                    for x in ['train', 'val']}
    dset_sizes = {x: len(dsets[x]) for x in ['train', 'val']}
    dset_classes = dsets['train'].classes

    use_gpu = torch.cuda.is_available()








Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.



.. code-block:: python


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dset_loaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[dset_classes[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :align: center




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving (deep copying) the best model

In the following, parameter ``lr_scheduler(optimizer, epoch)``
is a function  which modifies ``optimizer`` so that the learning
rate is changed according to desired schedule.



.. code-block:: python


    def train_model(model, criterion, optimizer, lr_scheduler, num_epochs=25):
        since = time.time()

        best_model = model
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    optimizer = lr_scheduler(optimizer, epoch)
                    model.train(True)  # Set model to training mode
                else:
                    model.train(False)  # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for data in dset_loaders[phase]:
                    # get the inputs
                    inputs, labels = data

                    # wrap them in Variable
                    if use_gpu:
                        inputs, labels = Variable(inputs.cuda()), \
                            Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.data[0]
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dset_sizes[phase]
                epoch_acc = running_corrects / dset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model = copy.deepcopy(model)

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))
        return best_model







Learning rate scheduler
^^^^^^^^^^^^^^^^^^^^^^^
Let's create our learning rate scheduler. We will exponentially
decrease the learning rate once every few epochs.



.. code-block:: python


    def exp_lr_scheduler(optimizer, epoch, init_lr=0.001, lr_decay_epoch=7):
        """Decay learning rate by a factor of 0.1 every lr_decay_epoch epochs."""
        lr = init_lr * (0.1**(epoch // lr_decay_epoch))

        if epoch % lr_decay_epoch == 0:
            print('LR is set to {}'.format(lr))

        for param_group in optimizer.param_groups:
            param_group['lr'] = lr

        return optimizer








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images




.. code-block:: python


    def visualize_model(model, num_images=6):
        images_so_far = 0
        fig = plt.figure()

        for i, data in enumerate(dset_loaders['val']):
            inputs, labels = data
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)

            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(dset_classes[preds[j][0]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    return







Finetuning the convnet
----------------------

Load a pretrained model and reset final fully connected layer.




.. code-block:: python


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_ft = model_ft.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)







Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.




.. code-block:: python


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    LR is set to 0.001
    train Loss: 0.1402 Acc: 0.6762
    val Loss: 0.0701 Acc: 0.9085

    Epoch 1/24
    ----------
    train Loss: 0.1087 Acc: 0.8074
    val Loss: 0.0548 Acc: 0.9020

    Epoch 2/24
    ----------
    train Loss: 0.0997 Acc: 0.8197
    val Loss: 0.0664 Acc: 0.9020

    Epoch 3/24
    ----------
    train Loss: 0.1429 Acc: 0.7582
    val Loss: 0.0641 Acc: 0.8889

    Epoch 4/24
    ----------
    train Loss: 0.1739 Acc: 0.7172
    val Loss: 0.1275 Acc: 0.8497

    Epoch 5/24
    ----------
    train Loss: 0.1403 Acc: 0.8033
    val Loss: 0.0750 Acc: 0.9085

    Epoch 6/24
    ----------
    train Loss: 0.1255 Acc: 0.8115
    val Loss: 0.3249 Acc: 0.6471

    Epoch 7/24
    ----------
    LR is set to 0.0001
    train Loss: 0.1138 Acc: 0.8279
    val Loss: 0.0703 Acc: 0.8954

    Epoch 8/24
    ----------
    train Loss: 0.0693 Acc: 0.8852
    val Loss: 0.0745 Acc: 0.8889

    Epoch 9/24
    ----------
    train Loss: 0.0646 Acc: 0.9098
    val Loss: 0.0768 Acc: 0.8954

    Epoch 10/24
    ----------
    train Loss: 0.0670 Acc: 0.8893
    val Loss: 0.0713 Acc: 0.9085

    Epoch 11/24
    ----------
    train Loss: 0.0990 Acc: 0.8361
    val Loss: 0.0580 Acc: 0.9216

    Epoch 12/24
    ----------
    train Loss: 0.0708 Acc: 0.9016
    val Loss: 0.0585 Acc: 0.9216

    Epoch 13/24
    ----------
    train Loss: 0.0726 Acc: 0.8730
    val Loss: 0.0584 Acc: 0.9281

    Epoch 14/24
    ----------
    LR is set to 1.0000000000000003e-05
    train Loss: 0.0941 Acc: 0.8361
    val Loss: 0.0598 Acc: 0.9216

    Epoch 15/24
    ----------
    train Loss: 0.0654 Acc: 0.8770
    val Loss: 0.0903 Acc: 0.8824

    Epoch 16/24
    ----------
    train Loss: 0.0802 Acc: 0.8566
    val Loss: 0.0561 Acc: 0.9281

    Epoch 17/24
    ----------
    train Loss: 0.0529 Acc: 0.9098
    val Loss: 0.0566 Acc: 0.9346

    Epoch 18/24
    ----------
    train Loss: 0.0864 Acc: 0.8484
    val Loss: 0.0601 Acc: 0.9150

    Epoch 19/24
    ----------
    train Loss: 0.0577 Acc: 0.9098
    val Loss: 0.0550 Acc: 0.9281

    Epoch 20/24
    ----------
    train Loss: 0.0606 Acc: 0.9139
    val Loss: 0.0611 Acc: 0.9150

    Epoch 21/24
    ----------
    LR is set to 1.0000000000000002e-06
    train Loss: 0.0810 Acc: 0.8648
    val Loss: 0.0593 Acc: 0.9216

    Epoch 22/24
    ----------
    train Loss: 0.0663 Acc: 0.8852
    val Loss: 0.0620 Acc: 0.9150

    Epoch 23/24
    ----------
    train Loss: 0.0787 Acc: 0.8648
    val Loss: 0.0686 Acc: 0.9020

    Epoch 24/24
    ----------
    train Loss: 0.0842 Acc: 0.8484
    val Loss: 0.0569 Acc: 0.9281

    Training complete in 2m 25s
    Best val Acc: 0.934641



.. code-block:: python


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :align: center




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_conv = model_conv.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opoosed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    LR is set to 0.001
    train Loss: 0.1674 Acc: 0.6516
    val Loss: 0.0773 Acc: 0.8693

    Epoch 1/24
    ----------
    train Loss: 0.1268 Acc: 0.7459
    val Loss: 0.0687 Acc: 0.8824

    Epoch 2/24
    ----------
    train Loss: 0.1050 Acc: 0.8320
    val Loss: 0.0495 Acc: 0.9150

    Epoch 3/24
    ----------
    train Loss: 0.1018 Acc: 0.8115
    val Loss: 0.0480 Acc: 0.9216

    Epoch 4/24
    ----------
    train Loss: 0.1207 Acc: 0.7869
    val Loss: 0.0529 Acc: 0.9346

    Epoch 5/24
    ----------
    train Loss: 0.1090 Acc: 0.8238
    val Loss: 0.0451 Acc: 0.9412

    Epoch 6/24
    ----------
    train Loss: 0.1113 Acc: 0.8156
    val Loss: 0.0643 Acc: 0.8954

    Epoch 7/24
    ----------
    LR is set to 0.0001
    train Loss: 0.0995 Acc: 0.8074
    val Loss: 0.0416 Acc: 0.9412

    Epoch 8/24
    ----------
    train Loss: 0.0800 Acc: 0.8566
    val Loss: 0.0423 Acc: 0.9477

    Epoch 9/24
    ----------
    train Loss: 0.0764 Acc: 0.8852
    val Loss: 0.0458 Acc: 0.9281

    Epoch 10/24
    ----------
    train Loss: 0.0910 Acc: 0.8402
    val Loss: 0.0473 Acc: 0.9412

    Epoch 11/24
    ----------
    train Loss: 0.0985 Acc: 0.8238
    val Loss: 0.0438 Acc: 0.9412

    Epoch 12/24
    ----------
    train Loss: 0.0869 Acc: 0.8402
    val Loss: 0.0485 Acc: 0.9346

    Epoch 13/24
    ----------
    train Loss: 0.0805 Acc: 0.8484
    val Loss: 0.0552 Acc: 0.9150

    Epoch 14/24
    ----------
    LR is set to 1.0000000000000003e-05
    train Loss: 0.0958 Acc: 0.8443
    val Loss: 0.0596 Acc: 0.8954

    Epoch 15/24
    ----------
    train Loss: 0.0906 Acc: 0.8238
    val Loss: 0.0456 Acc: 0.9542

    Epoch 16/24
    ----------
    train Loss: 0.0952 Acc: 0.8238
    val Loss: 0.0424 Acc: 0.9412

    Epoch 17/24
    ----------
    train Loss: 0.0851 Acc: 0.8689
    val Loss: 0.0485 Acc: 0.9412

    Epoch 18/24
    ----------
    train Loss: 0.0803 Acc: 0.8361
    val Loss: 0.0441 Acc: 0.9281

    Epoch 19/24
    ----------
    train Loss: 0.0883 Acc: 0.8320
    val Loss: 0.0427 Acc: 0.9346

    Epoch 20/24
    ----------
    train Loss: 0.0890 Acc: 0.8607
    val Loss: 0.0451 Acc: 0.9412

    Epoch 21/24
    ----------
    LR is set to 1.0000000000000002e-06
    train Loss: 0.0996 Acc: 0.7951
    val Loss: 0.0447 Acc: 0.9412

    Epoch 22/24
    ----------
    train Loss: 0.0697 Acc: 0.8770
    val Loss: 0.0485 Acc: 0.9346

    Epoch 23/24
    ----------
    train Loss: 0.0919 Acc: 0.8279
    val Loss: 0.0564 Acc: 0.9216

    Epoch 24/24
    ----------
    train Loss: 0.0707 Acc: 0.8852
    val Loss: 0.0571 Acc: 0.9281

    Training complete in 0m 52s
    Best val Acc: 0.954248



.. code-block:: python


    visualize_model(model_conv)

    plt.ioff()
    plt.show()



.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :align: center




**Total running time of the script:** ( 3 minutes  21.777 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
