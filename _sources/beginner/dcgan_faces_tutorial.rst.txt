.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_beginner_dcgan_faces_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_dcgan_faces_tutorial.py:


DCGAN Tutorial
==============

**Author**: `Nathan Inkawhich <https://github.com/inkawhich>`__



Introduction
------------

This tutorial will give an introduction to DCGANs through an example. We
will train a generative adversarial network (GAN) to generate new
celebrities after showing it pictures of many real celebrities. Most of
the code here is from the dcgan implementation in
`pytorch/examples <https://github.com/pytorch/examples>`__, and this
document will give a thorough explanation of the implementation and shed
light on how and why this model works. But don’t worry, no prior
knowledge of GANs is required, but it may require a first-timer to spend
some time reasoning about what is actually happening under the hood.
Also, for the sake of time it will help to have a GPU, or two. Lets
start from the beginning.

Generative Adversarial Networks
-------------------------------

What is a GAN?
~~~~~~~~~~~~~~

GANs are a framework for teaching a DL model to capture the training
data’s distribution so we can generate new data from that same
distribution. GANs were invented by Ian Goodfellow in 2014 and first
described in the paper `Generative Adversarial
Nets <https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf>`__.
They are made of two distinct models, a *generator* and a
*discriminator*. The job of the generator is to spawn ‘fake’ images that
look like the training images. The job of the discriminator is to look
at an image and output whether or not it is a real training image or a
fake image from the generator. During training, the generator is
constantly trying to outsmart the discriminator by generating better and
better fakes, while the discriminator is working to become a better
detective and correctly classify the real and fake images. The
equilibrium of this game is when the generator is generating perfect
fakes that look as if they came directly from the training data, and the
discriminator is left to always guess at 50% confidence that the
generator output is real or fake.

Now, lets define some notation to be used throughout tutorial starting
with the discriminator. Let :math:`x` be data representing an image.
:math:`D(x)` is the discriminator network which outputs the (scalar)
probability that :math:`x` came from training data rather than the
generator. Here, since we are dealing with images the input to
:math:`D(x)` is an image of HWC size 3x64x64. Intuitively, :math:`D(x)`
should be HIGH when :math:`x` comes from training data and LOW when
:math:`x` comes from the generator. :math:`D(x)` can also be thought of
as a traditional binary classifier.

For the generator’s notation, let :math:`z` be a latent space vector
sampled from a standard normal distribution. :math:`G(z)` represents the
generator function which maps the latent vector :math:`z` to data-space.
The goal of :math:`G` is to estimate the distribution that the training
data comes from (:math:`p_{data}`) so it can generate fake samples from
that estimated distribution (:math:`p_g`).

So, :math:`D(G(z))` is the probability (scalar) that the output of the
generator :math:`G` is a real image. As described in `Goodfellow’s
paper <https://papers.nips.cc/paper/5423-generative-adversarial-nets.pdf>`__,
:math:`D` and :math:`G` play a minimax game in which :math:`D` tries to
maximize the probability it correctly classifies reals and fakes
(:math:`logD(x)`), and :math:`G` tries to minimize the probability that
:math:`D` will predict its outputs are fake (:math:`log(1-D(G(x)))`).
From the paper, the GAN loss function is

.. math:: \underset{G}{\text{min}} \underset{D}{\text{max}}V(D,G) = \mathbb{E}_{x\sim p_{data}(x)}\big[logD(x)\big] + \mathbb{E}_{z\sim p_{z}(z)}\big[log(1-D(G(x)))\big]

In theory, the solution to this minimax game is where
:math:`p_g = p_{data}`, and the discriminator guesses randomly if the
inputs are real or fake. However, the convergence theory of GANs is
still being actively researched and in reality models do not always
train to this point.

What is a DCGAN?
~~~~~~~~~~~~~~~~

A DCGAN is a direct extension of the GAN described above, except that it
explicitly uses convolutional and convolutional-transpose layers in the
discriminator and generator, respectively. It was first described by
Radford et. al. in the paper `Unsupervised Representation Learning With
Deep Convolutional Generative Adversarial
Networks <https://arxiv.org/pdf/1511.06434.pdf>`__. The discriminator
is made up of strided
`convolution <https://pytorch.org/docs/stable/nn.html#torch.nn.Conv2d>`__
layers, `batch
norm <https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm2d>`__
layers, and
`LeakyReLU <https://pytorch.org/docs/stable/nn.html#torch.nn.LeakyReLU>`__
activations. The input is a 3x64x64 input image and the output is a
scalar probability that the input is from the real data distribution.
The generator is comprised of
`convolutional-transpose <https://pytorch.org/docs/stable/nn.html#torch.nn.ConvTranspose2d>`__
layers, batch norm layers, and
`ReLU <https://pytorch.org/docs/stable/nn.html#relu>`__ activations. The
input is a latent vector, :math:`z`, that is drawn from a standard
normal distribution and the output is a 3x64x64 RGB image. The strided
conv-transpose layers allow the latent vector to be transformed into a
volume with the same shape as an image. In the paper, the authors also
give some tips about how to setup the optimizers, how to calculate the
loss functions, and how to initialize the model weights, all of which
will be explained in the coming sections.




.. code-block:: python


    from __future__ import print_function
    #%matplotlib inline
    import argparse
    import os
    import random
    import torch
    import torch.nn as nn
    import torch.nn.parallel
    import torch.backends.cudnn as cudnn
    import torch.optim as optim
    import torch.utils.data
    import torchvision.datasets as dset
    import torchvision.transforms as transforms
    import torchvision.utils as vutils
    import numpy as np
    import matplotlib.pyplot as plt
    import matplotlib.animation as animation
    from IPython.display import HTML

    # Set random seem for reproducibility
    manualSeed = 999
    #manualSeed = random.randint(1, 10000) # use if you want new results
    print("Random Seed: ", manualSeed)
    random.seed(manualSeed)
    torch.manual_seed(manualSeed)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Random Seed:  999


Inputs
------

Let’s define some inputs for the run:

-  **dataroot** - the path to the root of the dataset folder. We will
   talk more about the dataset in the next section
-  **workers** - the number of worker threads for loading the data with
   the DataLoader
-  **batch_size** - the batch size used in training. The DCGAN paper
   uses a batch size of 128
-  **image_size** - the spatial size of the images used for training.
   This implementation defaults to 64x64. If another size is desired,
   the structures of D and G must be changed. See
   `here <https://github.com/pytorch/examples/issues/70>`__ for more
   details
-  **nc** - number of color channels in the input images. For color
   images this is 3
-  **nz** - length of latent vector
-  **ngf** - relates to the depth of feature maps carried through the
   generator
-  **ndf** - sets the depth of feature maps propagated through the
   discriminator
-  **num_epochs** - number of training epochs to run. Training for
   longer will probably lead to better results but will also take much
   longer
-  **lr** - learning rate for training. As described in the DCGAN paper,
   this number should be 0.0002
-  **beta1** - beta1 hyperparameter for Adam optimizers. As described in
   paper, this number should be 0.5
-  **ngpu** - number of GPUs available. If this is 0, code will run in
   CPU mode. If this number is greater than 0 it will run on that number
   of GPUs




.. code-block:: python


    # Root directory for dataset
    dataroot = "data/celeba"

    # Number of workers for dataloader
    workers = 2

    # Batch size during training
    batch_size = 128

    # Spatial size of training images. All images will be resized to this
    #   size using a transformer.
    image_size = 64

    # Number of channels in the training images. For color images this is 3
    nc = 3

    # Size of z latent vector (i.e. size of generator input)
    nz = 100

    # Size of feature maps in generator
    ngf = 64

    # Size of feature maps in discriminator
    ndf = 64

    # Number of training epochs
    num_epochs = 5

    # Learning rate for optimizers
    lr = 0.0002

    # Beta1 hyperparam for Adam optimizers
    beta1 = 0.5

    # Number of GPUs available. Use 0 for CPU mode.
    ngpu = 1








Data
----

In this tutorial we will use the `Celeb-A Faces
dataset <http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html>`__ which can
be downloaded at the linked site, or in `Google
Drive <https://drive.google.com/drive/folders/0B7EVK8r0v71pTUZsaXdaSnZBZzg>`__.
The dataset will download as a file named *img_align_celeba.zip*. Once
downloaded, create a directory named *celeba* and extract the zip file
into that directory. Then, set the *dataroot* input for this notebook to
the *celeba* directory you just created. The resulting directory
structure should be:

::

   /path/to/celeba
       -> img_align_celeba  
           -> 188242.jpg
           -> 173822.jpg
           -> 284702.jpg
           -> 537394.jpg
              ...

This is an important step because we will be using the ImageFolder
dataset class, which requires there to be subdirectories in the
dataset’s root folder. Now, we can create the dataset, create the
dataloader, set the device to run on, and finally visualize some of the
training data.




.. code-block:: python


    # We can use an image folder dataset the way we have it setup.
    # Create the dataset
    dataset = dset.ImageFolder(root=dataroot,
                               transform=transforms.Compose([
                                   transforms.Resize(image_size),
                                   transforms.CenterCrop(image_size),
                                   transforms.ToTensor(),
                                   transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),
                               ]))
    # Create the dataloader
    dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,
                                             shuffle=True, num_workers=workers)

    # Decide which device we want to run on
    device = torch.device("cuda:0" if (torch.cuda.is_available() and ngpu > 0) else "cpu")

    # Plot some training images
    real_batch = next(iter(dataloader))
    plt.figure(figsize=(8,8))
    plt.axis("off")
    plt.title("Training Images")
    plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=2, normalize=True).cpu(),(1,2,0)))






.. image:: /beginner/images/sphx_glr_dcgan_faces_tutorial_001.png
    :class: sphx-glr-single-img




Implementation
--------------

With our input parameters set and the dataset prepared, we can now get
into the implementation. We will start with the weigth initialization
strategy, then talk about the generator, discriminator, loss functions,
and training loop in detail.

Weight Initialization
~~~~~~~~~~~~~~~~~~~~~

From the DCGAN paper, the authors specify that all model weights shall
be randomly initialized from a Normal distribution with mean=0,
stdev=0.2. The ``weights_init`` function takes an initialized model as
input and reinitializes all convolutional, convolutional-transpose, and
batch normalization layers to meet this criteria. This function is
applied to the models immediately after initialization.




.. code-block:: python


    # custom weights initialization called on netG and netD
    def weights_init(m):
        classname = m.__class__.__name__
        if classname.find('Conv') != -1:
            nn.init.normal_(m.weight.data, 0.0, 0.02)
        elif classname.find('BatchNorm') != -1:
            nn.init.normal_(m.weight.data, 1.0, 0.02)
            nn.init.constant_(m.bias.data, 0)








Generator
~~~~~~~~~

The generator, :math:`G`, is designed to map the latent space vector
(:math:`z`) to data-space. Since our data are images, converting
:math:`z` to data-space means ultimately creating a RGB image with the
same size as the training images (i.e. 3x64x64). In practice, this is
accomplished through a series of strided two dimensional convolutional
transpose layers, each paired with a 2d batch norm layer and a relu
activation. The output of the generator is fed through a tanh function
to return it to the input data range of :math:`[-1,1]`. It is worth
noting the existence of the batch norm functions after the
conv-transpose layers, as this is a critical contribution of the DCGAN
paper. These layers help with the flow of gradients during training. An
image of the generator from the DCGAN paper is shown below.

.. figure:: /_static/img/dcgan_generator.png
   :alt: dcgan_generator

Notice, the how the inputs we set in the input section (*nz*, *ngf*, and
*nc*) influence the generator architecture in code. *nz* is the length
of the z input vector, *ngf* relates to the size of the feature maps
that are propagated through the generator, and *nc* is the number of
channels in the output image (set to 3 for RGB images). Below is the
code for the generator.




.. code-block:: python


    # Generator Code

    class Generator(nn.Module):
        def __init__(self, ngpu):
            super(Generator, self).__init__()
            self.ngpu = ngpu
            self.main = nn.Sequential(
                # input is Z, going into a convolution
                nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),
                nn.BatchNorm2d(ngf * 8),
                nn.ReLU(True),
                # state size. (ngf*8) x 4 x 4
                nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ngf * 4),
                nn.ReLU(True),
                # state size. (ngf*4) x 8 x 8
                nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ngf * 2),
                nn.ReLU(True),
                # state size. (ngf*2) x 16 x 16
                nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ngf),
                nn.ReLU(True),
                # state size. (ngf) x 32 x 32
                nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False),
                nn.Tanh()
                # state size. (nc) x 64 x 64
            )

        def forward(self, input):
            return self.main(input)








Now, we can instantiate the generator and apply the ``weights_init``
function. Check out the printed model to see how the generator object is
structured.




.. code-block:: python


    # Create the generator
    netG = Generator(ngpu).to(device)

    # Handle multi-gpu if desired
    if (device.type == 'cuda') and (ngpu > 1):
        netG = nn.DataParallel(netG, list(range(ngpu)))

    # Apply the weights_init function to randomly initialize all weights
    #  to mean=0, stdev=0.2.
    netG.apply(weights_init)

    # Print the model
    print(netG)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Generator(
      (main): Sequential(
        (0): ConvTranspose2d(100, 512, kernel_size=(4, 4), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): ConvTranspose2d(512, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU(inplace)
        (6): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (8): ReLU(inplace)
        (9): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (10): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (11): ReLU(inplace)
        (12): ConvTranspose2d(64, 3, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (13): Tanh()
      )
    )


Discriminator
~~~~~~~~~~~~~

As mentioned, the discriminator, :math:`D`, is a binary classification
network that takes an image as input and outputs a scalar probability
that the input image is real (as opposed to fake). Here, :math:`D` takes
a 3x64x64 input image, processes it through a series of Conv2d,
BatchNorm2d, and LeakyReLU layers, and outputs the final probability
through a Sigmoid activation function. This architecture can be extended
with more layers if necessary for the problem, but there is significance
to the use of the strided convolution, BatchNorm, and LeakyReLUs. The
DCGAN paper mentions it is a good practice to use strided convolution
rather than pooling to downsample because it lets the network learn its
own pooling function. Also batch norm and leaky relu functions promote
healthy gradient flow which is critical for the learning process of both
:math:`G` and :math:`D`.



Discriminator Code



.. code-block:: python


    class Discriminator(nn.Module):
        def __init__(self, ngpu):
            super(Discriminator, self).__init__()
            self.ngpu = ngpu
            self.main = nn.Sequential(
                # input is (nc) x 64 x 64
                nn.Conv2d(nc, ndf, 4, 2, 1, bias=False),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf) x 32 x 32
                nn.Conv2d(ndf, ndf * 2, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ndf * 2),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf*2) x 16 x 16
                nn.Conv2d(ndf * 2, ndf * 4, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ndf * 4),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf*4) x 8 x 8
                nn.Conv2d(ndf * 4, ndf * 8, 4, 2, 1, bias=False),
                nn.BatchNorm2d(ndf * 8),
                nn.LeakyReLU(0.2, inplace=True),
                # state size. (ndf*8) x 4 x 4
                nn.Conv2d(ndf * 8, 1, 4, 1, 0, bias=False),
                nn.Sigmoid()
            )

        def forward(self, input):
            return self.main(input)








Now, as with the generator, we can create the discriminator, apply the
``weights_init`` function, and print the model’s structure.




.. code-block:: python


    # Create the Discriminator
    netD = Discriminator(ngpu).to(device)

    # Handle multi-gpu if desired
    if (device.type == 'cuda') and (ngpu > 1):
        netD = nn.DataParallel(netD, list(range(ngpu)))
    
    # Apply the weights_init function to randomly initialize all weights
    #  to mean=0, stdev=0.2.
    netD.apply(weights_init)

    # Print the model
    print(netD)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Discriminator(
      (main): Sequential(
        (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (1): LeakyReLU(negative_slope=0.2, inplace)
        (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (4): LeakyReLU(negative_slope=0.2, inplace)
        (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (6): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (7): LeakyReLU(negative_slope=0.2, inplace)
        (8): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
        (9): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (10): LeakyReLU(negative_slope=0.2, inplace)
        (11): Conv2d(512, 1, kernel_size=(4, 4), stride=(1, 1), bias=False)
        (12): Sigmoid()
      )
    )


Loss Functions and Optimizers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

With :math:`D` and :math:`G` setup, we can specify how they learn
through the loss functions and optimizers. We will use the Binary Cross
Entropy loss
(`BCELoss <https://pytorch.org/docs/stable/nn.html#torch.nn.BCELoss>`__)
function which is defined in PyTorch as:

.. math:: \ell(x, y) = L = \{l_1,\dots,l_N\}^\top, \quad l_n = - \left[ y_n \cdot \log x_n + (1 - y_n) \cdot \log (1 - x_n) \right]

Notice how this function provides the calculation of both log components
in the objective function (i.e. :math:`log(D(x))` and
:math:`log(1-D(G(z)))`). We can specify what part of the BCE equation to
use with the :math:`y` input. This is accomplished in the training loop
which is coming up soon, but it is important to understand how we can
choose which component we wish to calculate just by changing :math:`y`
(i.e. GT labels).

Next, we define our real label as 1 and the fake label as 0. These
labels will be used when calculating the losses of :math:`D` and
:math:`G`, and this is also the convention used in the original GAN
paper. Finally, we set up two separate optimizers, one for :math:`D` and
one for :math:`G`. As specified in the DCGAN paper, both are Adam
optimizers with learning rate 0.0002 and Beta1 = 0.5. For keeping track
of the generator’s learning progression, we will generate a fixed batch
of latent vectors that are drawn from a Gaussian distribution
(i.e. fixed_noise) . In the training loop, we will periodically input
this fixed_noise into :math:`G`, and over the iterations we will see
images form out of the noise.




.. code-block:: python


    # Initialize BCELoss function
    criterion = nn.BCELoss()

    # Create batch of latent vectors that we will use to visualize
    #  the progression of the generator
    fixed_noise = torch.randn(64, nz, 1, 1, device=device)

    # Establish convention for real and fake labels during training
    real_label = 1
    fake_label = 0

    # Setup Adam optimizers for both G and D
    optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999))
    optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999))








Training
~~~~~~~~

Finally, now that we have all of the parts of the GAN framework defined,
we can train it. Be mindful that training GANs is somewhat of an art
form, as incorrect hyperparameter settings lead to mode collapse with
little explanation of what went wrong. Here, we will closely follow
Algorithm 1 from Goodfellow’s paper, while abiding by some of the best
practices shown in `ganhacks <https://github.com/soumith/ganhacks>`__.
Namely, we will “construct different mini-batches for real and fake”
images, and also adjust G’s objective function to maximize
:math:`logD(G(z))`. Training is split up into two main parts. Part 1
updates the Discriminator and Part 2 updates the Generator.

**Part 1 - Train the Discriminator**

Recall, the goal of training the discriminator is to maximize the
probability of correctly classifying a given input as real or fake. In
terms of Goodfellow, we wish to “update the discriminator by ascending
its stochastic gradient”. Practically, we want to maximize
:math:`log(D(x)) + log(1-D(G(z)))`. Due to the separate mini-batch
suggestion from ganhacks, we will calculate this in two steps. First, we
will construct a batch of real samples from the training set, forward
pass through :math:`D`, calculate the loss (:math:`log(D(x))`), then
calculate the gradients in a backward pass. Secondly, we will construct
a batch of fake samples with the current generator, forward pass this
batch through :math:`D`, calculate the loss (:math:`log(1-D(G(z)))`),
and *accumulate* the gradients with a backward pass. Now, with the
gradients accumulated from both the all-real and all-fake batches, we
call a step of the Discriminator’s optimizer.

**Part 2 - Train the Generator**

As stated in the original paper, we want to train the Generator by
minimizing :math:`log(1-D(G(z)))` in an effort to generate better fakes.
As mentioned, this was shown by Goodfellow to not provide sufficient
gradients, especially early in the learning process. As a fix, we
instead wish to maximize :math:`log(D(G(z)))`. In the code we accomplish
this by: classifying the Generator output from Part 1 with the
Discriminator, computing G’s loss *using real labels as GT*, computing
G’s gradients in a backward pass, and finally updating G’s parameters
with an optimizer step. It may seem counter-intuitive to use the real
labels as GT labels for the loss function, but this allows us to use the
:math:`log(x)` part of the BCELoss (rather than the :math:`log(1-x)`
part) which is exactly what we want.

Finally, we will do some statistic reporting and at the end of each
epoch we will push our fixed_noise batch through the generator to
visually track the progress of G’s training. The training statistics
reported are:

-  **Loss_D** - discriminator loss calculated as the sum of losses for
   the all real and all fake batches (:math:`log(D(x)) + log(D(G(z)))`).
-  **Loss_G** - generator loss calculated as :math:`log(D(G(z)))`
-  **D(x)** - the average output (across the batch) of the discriminator
   for the all real batch. This should start close to 1 then
   theoretically converge to 0.5 when G gets better. Think about why
   this is.
-  **D(G(z))** - average discriminator outputs for the all fake batch.
   The first number is before D is updated and the second number is
   after D is updated. These numbers should start near 0 and converge to
   0.5 as G gets better. Think about why this is.

**Note:** This step might take a while, depending on how many epochs you
run and if you removed some data from the dataset.




.. code-block:: python


    # Training Loop

    # Lists to keep track of progress
    img_list = []
    G_losses = []
    D_losses = []
    iters = 0

    print("Starting Training Loop...")
    # For each epoch
    for epoch in range(num_epochs):
        # For each batch in the dataloader
        for i, data in enumerate(dataloader, 0):
        
            ############################
            # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))
            ###########################
            ## Train with all-real batch
            netD.zero_grad()
            # Format batch
            real_cpu = data[0].to(device)
            b_size = real_cpu.size(0)
            label = torch.full((b_size,), real_label, device=device)
            # Forward pass real batch through D
            output = netD(real_cpu).view(-1)
            # Calculate loss on all-real batch
            errD_real = criterion(output, label)
            # Calculate gradients for D in backward pass
            errD_real.backward()
            D_x = output.mean().item()

            ## Train with all-fake batch
            # Generate batch of latent vectors
            noise = torch.randn(b_size, nz, 1, 1, device=device)
            # Generate fake image batch with G
            fake = netG(noise)
            label.fill_(fake_label)
            # Classify all fake batch with D
            output = netD(fake.detach()).view(-1)
            # Calculate D's loss on the all-fake batch
            errD_fake = criterion(output, label)
            # Calculate the gradients for this batch
            errD_fake.backward()
            D_G_z1 = output.mean().item()
            # Add the gradients from the all-real and all-fake batches
            errD = errD_real + errD_fake
            # Update D
            optimizerD.step()

            ############################
            # (2) Update G network: maximize log(D(G(z)))
            ###########################
            netG.zero_grad()
            label.fill_(real_label)  # fake labels are real for generator cost
            # Since we just updated D, perform another forward pass of all-fake batch through D
            output = netD(fake).view(-1)
            # Calculate G's loss based on this output
            errG = criterion(output, label)
            # Calculate gradients for G
            errG.backward()
            D_G_z2 = output.mean().item()
            # Update G
            optimizerG.step()
        
            # Output training stats
            if i % 50 == 0:
                print('[%d/%d][%d/%d]\tLoss_D: %.4f\tLoss_G: %.4f\tD(x): %.4f\tD(G(z)): %.4f / %.4f'
                      % (epoch, num_epochs, i, len(dataloader),
                         errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))
        
            # Save Losses for plotting later
            G_losses.append(errG.item())
            D_losses.append(errD.item())
        
            # Check how the generator is doing by saving G's output on fixed_noise
            if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)):
                with torch.no_grad():
                    fake = netG(fixed_noise).detach().cpu()
                img_list.append(vutils.make_grid(fake, padding=2, normalize=True))
            
            iters += 1






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Starting Training Loop...
    [0/5][0/1583]   Loss_D: 1.7410  Loss_G: 4.7764  D(x): 0.5343    D(G(z)): 0.5771 / 0.0136
    [0/5][50/1583]  Loss_D: 0.0110  Loss_G: 29.0730 D(x): 0.9921    D(G(z)): 0.0000 / 0.0000
    [0/5][100/1583] Loss_D: 0.2691  Loss_G: 11.3166 D(x): 0.8413    D(G(z)): 0.0033 / 0.0008
    [0/5][150/1583] Loss_D: 0.6448  Loss_G: 3.7590  D(x): 0.7485    D(G(z)): 0.1961 / 0.0295
    [0/5][200/1583] Loss_D: 0.9018  Loss_G: 5.6608  D(x): 0.5523    D(G(z)): 0.0217 / 0.0120
    [0/5][250/1583] Loss_D: 0.5531  Loss_G: 5.2389  D(x): 0.8211    D(G(z)): 0.2087 / 0.0083
    [0/5][300/1583] Loss_D: 0.5144  Loss_G: 5.1494  D(x): 0.8679    D(G(z)): 0.2385 / 0.0150
    [0/5][350/1583] Loss_D: 0.4065  Loss_G: 3.2266  D(x): 0.7876    D(G(z)): 0.0883 / 0.0626
    [0/5][400/1583] Loss_D: 0.8670  Loss_G: 2.4115  D(x): 0.5472    D(G(z)): 0.0540 / 0.1429
    [0/5][450/1583] Loss_D: 0.3171  Loss_G: 4.3070  D(x): 0.8901    D(G(z)): 0.1353 / 0.0256
    [0/5][500/1583] Loss_D: 0.8423  Loss_G: 6.4113  D(x): 0.5746    D(G(z)): 0.0110 / 0.0082
    [0/5][550/1583] Loss_D: 0.6403  Loss_G: 2.4626  D(x): 0.6587    D(G(z)): 0.0379 / 0.1775
    [0/5][600/1583] Loss_D: 0.5044  Loss_G: 4.0269  D(x): 0.7672    D(G(z)): 0.1176 / 0.0283
    [0/5][650/1583] Loss_D: 0.7792  Loss_G: 5.1394  D(x): 0.5825    D(G(z)): 0.0127 / 0.0146
    [0/5][700/1583] Loss_D: 0.6592  Loss_G: 2.7273  D(x): 0.6628    D(G(z)): 0.0887 / 0.1133
    [0/5][750/1583] Loss_D: 0.4397  Loss_G: 5.6692  D(x): 0.8728    D(G(z)): 0.2178 / 0.0074
    [0/5][800/1583] Loss_D: 0.9174  Loss_G: 6.6212  D(x): 0.9658    D(G(z)): 0.4920 / 0.0040
    [0/5][850/1583] Loss_D: 0.3673  Loss_G: 4.2762  D(x): 0.8354    D(G(z)): 0.0868 / 0.0232
    [0/5][900/1583] Loss_D: 0.4512  Loss_G: 4.6451  D(x): 0.7140    D(G(z)): 0.0304 / 0.0268
    [0/5][950/1583] Loss_D: 0.6250  Loss_G: 5.7946  D(x): 0.8777    D(G(z)): 0.3108 / 0.0110
    [0/5][1000/1583]        Loss_D: 0.4857  Loss_G: 3.6268  D(x): 0.8575    D(G(z)): 0.2278 / 0.0454
    [0/5][1050/1583]        Loss_D: 0.8415  Loss_G: 7.2168  D(x): 0.9268    D(G(z)): 0.4668 / 0.0018
    [0/5][1100/1583]        Loss_D: 0.9034  Loss_G: 2.1795  D(x): 0.5360    D(G(z)): 0.0347 / 0.1617
    [0/5][1150/1583]        Loss_D: 0.3960  Loss_G: 3.5141  D(x): 0.8193    D(G(z)): 0.1303 / 0.0444
    [0/5][1200/1583]        Loss_D: 0.6166  Loss_G: 3.5159  D(x): 0.7843    D(G(z)): 0.2429 / 0.0463
    [0/5][1250/1583]        Loss_D: 0.6318  Loss_G: 4.3193  D(x): 0.7409    D(G(z)): 0.1833 / 0.0256
    [0/5][1300/1583]        Loss_D: 0.5217  Loss_G: 4.0391  D(x): 0.7905    D(G(z)): 0.1693 / 0.0330
    [0/5][1350/1583]        Loss_D: 1.1310  Loss_G: 8.2079  D(x): 0.8355    D(G(z)): 0.5174 / 0.0009
    [0/5][1400/1583]        Loss_D: 0.8284  Loss_G: 7.7848  D(x): 0.9725    D(G(z)): 0.4794 / 0.0014
    [0/5][1450/1583]        Loss_D: 1.7411  Loss_G: 7.4958  D(x): 0.9625    D(G(z)): 0.7125 / 0.0017
    [0/5][1500/1583]        Loss_D: 0.3849  Loss_G: 3.6374  D(x): 0.8195    D(G(z)): 0.1182 / 0.0462
    [0/5][1550/1583]        Loss_D: 0.9600  Loss_G: 7.2110  D(x): 0.9658    D(G(z)): 0.5337 / 0.0014
    [1/5][0/1583]   Loss_D: 0.2518  Loss_G: 4.1840  D(x): 0.8540    D(G(z)): 0.0595 / 0.0254
    [1/5][50/1583]  Loss_D: 0.3577  Loss_G: 3.8768  D(x): 0.8596    D(G(z)): 0.1537 / 0.0316
    [1/5][100/1583] Loss_D: 0.4328  Loss_G: 3.0822  D(x): 0.7834    D(G(z)): 0.0992 / 0.0763
    [1/5][150/1583] Loss_D: 0.3725  Loss_G: 3.1920  D(x): 0.8864    D(G(z)): 0.1843 / 0.0733
    [1/5][200/1583] Loss_D: 0.8628  Loss_G: 1.9816  D(x): 0.5556    D(G(z)): 0.0435 / 0.2144
    [1/5][250/1583] Loss_D: 0.6630  Loss_G: 4.9168  D(x): 0.9054    D(G(z)): 0.3758 / 0.0135
    [1/5][300/1583] Loss_D: 0.4174  Loss_G: 3.1888  D(x): 0.7446    D(G(z)): 0.0682 / 0.0641
    [1/5][350/1583] Loss_D: 1.1475  Loss_G: 1.6796  D(x): 0.4205    D(G(z)): 0.0183 / 0.2565
    [1/5][400/1583] Loss_D: 0.5317  Loss_G: 4.1414  D(x): 0.8712    D(G(z)): 0.2738 / 0.0282
    [1/5][450/1583] Loss_D: 0.9507  Loss_G: 6.1139  D(x): 0.8682    D(G(z)): 0.4733 / 0.0040
    [1/5][500/1583] Loss_D: 1.0072  Loss_G: 5.5619  D(x): 0.8930    D(G(z)): 0.5125 / 0.0077
    [1/5][550/1583] Loss_D: 0.3419  Loss_G: 2.8670  D(x): 0.8919    D(G(z)): 0.1688 / 0.0895
    [1/5][600/1583] Loss_D: 0.6169  Loss_G: 3.7120  D(x): 0.8519    D(G(z)): 0.3032 / 0.0412
    [1/5][650/1583] Loss_D: 0.3275  Loss_G: 4.3658  D(x): 0.8497    D(G(z)): 0.1199 / 0.0233
    [1/5][700/1583] Loss_D: 0.3542  Loss_G: 3.3723  D(x): 0.8665    D(G(z)): 0.1674 / 0.0475
    [1/5][750/1583] Loss_D: 0.8363  Loss_G: 5.6487  D(x): 0.9274    D(G(z)): 0.4426 / 0.0081
    [1/5][800/1583] Loss_D: 0.3266  Loss_G: 2.6443  D(x): 0.8823    D(G(z)): 0.1588 / 0.0987
    [1/5][850/1583] Loss_D: 1.1997  Loss_G: 1.6461  D(x): 0.4474    D(G(z)): 0.0912 / 0.2721
    [1/5][900/1583] Loss_D: 0.3618  Loss_G: 2.6012  D(x): 0.8357    D(G(z)): 0.1382 / 0.1088
    [1/5][950/1583] Loss_D: 0.6252  Loss_G: 3.6840  D(x): 0.8843    D(G(z)): 0.3487 / 0.0410
    [1/5][1000/1583]        Loss_D: 0.5877  Loss_G: 1.8763  D(x): 0.6399    D(G(z)): 0.0588 / 0.2022
    [1/5][1050/1583]        Loss_D: 2.5637  Loss_G: 0.5971  D(x): 0.1583    D(G(z)): 0.0082 / 0.6446
    [1/5][1100/1583]        Loss_D: 0.9515  Loss_G: 1.9145  D(x): 0.4651    D(G(z)): 0.0321 / 0.2063
    [1/5][1150/1583]        Loss_D: 0.8497  Loss_G: 4.3713  D(x): 0.7918    D(G(z)): 0.3977 / 0.0256
    [1/5][1200/1583]        Loss_D: 0.7580  Loss_G: 5.0156  D(x): 0.9559    D(G(z)): 0.4655 / 0.0106
    [1/5][1250/1583]        Loss_D: 0.3695  Loss_G: 3.6694  D(x): 0.8708    D(G(z)): 0.1839 / 0.0375
    [1/5][1300/1583]        Loss_D: 0.5765  Loss_G: 3.5503  D(x): 0.8617    D(G(z)): 0.3054 / 0.0431
    [1/5][1350/1583]        Loss_D: 0.4047  Loss_G: 2.4471  D(x): 0.8285    D(G(z)): 0.1735 / 0.1099
    [1/5][1400/1583]        Loss_D: 0.5986  Loss_G: 3.3368  D(x): 0.7780    D(G(z)): 0.2441 / 0.0543
    [1/5][1450/1583]        Loss_D: 0.6106  Loss_G: 2.7762  D(x): 0.7552    D(G(z)): 0.2290 / 0.0884
    [1/5][1500/1583]        Loss_D: 0.9563  Loss_G: 4.2554  D(x): 0.9374    D(G(z)): 0.5220 / 0.0223
    [1/5][1550/1583]        Loss_D: 0.5391  Loss_G: 2.4060  D(x): 0.7806    D(G(z)): 0.2013 / 0.1239
    [2/5][0/1583]   Loss_D: 0.7019  Loss_G: 2.7915  D(x): 0.7471    D(G(z)): 0.2764 / 0.0858
    [2/5][50/1583]  Loss_D: 0.7316  Loss_G: 1.2261  D(x): 0.5525    D(G(z)): 0.0539 / 0.3509
    [2/5][100/1583] Loss_D: 1.8504  Loss_G: 0.6499  D(x): 0.2452    D(G(z)): 0.0428 / 0.5735
    [2/5][150/1583] Loss_D: 0.6107  Loss_G: 2.4452  D(x): 0.7348    D(G(z)): 0.2071 / 0.1115
    [2/5][200/1583] Loss_D: 0.6909  Loss_G: 3.0348  D(x): 0.8014    D(G(z)): 0.3330 / 0.0634
    [2/5][250/1583] Loss_D: 0.7596  Loss_G: 1.0144  D(x): 0.5685    D(G(z)): 0.0664 / 0.4257
    [2/5][300/1583] Loss_D: 0.6201  Loss_G: 3.8590  D(x): 0.9254    D(G(z)): 0.3831 / 0.0305
    [2/5][350/1583] Loss_D: 0.5193  Loss_G: 2.4657  D(x): 0.7593    D(G(z)): 0.1822 / 0.1089
    [2/5][400/1583] Loss_D: 1.6379  Loss_G: 0.3146  D(x): 0.2542    D(G(z)): 0.0130 / 0.7684
    [2/5][450/1583] Loss_D: 0.5845  Loss_G: 2.6891  D(x): 0.6261    D(G(z)): 0.0499 / 0.0964
    [2/5][500/1583] Loss_D: 0.6987  Loss_G: 2.0094  D(x): 0.5704    D(G(z)): 0.0435 / 0.1814
    [2/5][550/1583] Loss_D: 0.5415  Loss_G: 3.5310  D(x): 0.8971    D(G(z)): 0.3276 / 0.0372
    [2/5][600/1583] Loss_D: 0.4856  Loss_G: 2.6832  D(x): 0.8754    D(G(z)): 0.2639 / 0.0923
    [2/5][650/1583] Loss_D: 0.5898  Loss_G: 3.0553  D(x): 0.8493    D(G(z)): 0.3125 / 0.0630
    [2/5][700/1583] Loss_D: 0.6398  Loss_G: 2.7859  D(x): 0.7488    D(G(z)): 0.2521 / 0.0863
    [2/5][750/1583] Loss_D: 0.8812  Loss_G: 1.5327  D(x): 0.5550    D(G(z)): 0.1349 / 0.2683
    [2/5][800/1583] Loss_D: 0.4119  Loss_G: 3.0007  D(x): 0.8756    D(G(z)): 0.2221 / 0.0658
    [2/5][850/1583] Loss_D: 0.9140  Loss_G: 3.7664  D(x): 0.8864    D(G(z)): 0.5006 / 0.0345
    [2/5][900/1583] Loss_D: 0.5953  Loss_G: 2.6773  D(x): 0.7129    D(G(z)): 0.1819 / 0.0982
    [2/5][950/1583] Loss_D: 0.9189  Loss_G: 4.1876  D(x): 0.9431    D(G(z)): 0.5208 / 0.0294
    [2/5][1000/1583]        Loss_D: 0.8886  Loss_G: 4.1923  D(x): 0.9401    D(G(z)): 0.5141 / 0.0231
    [2/5][1050/1583]        Loss_D: 0.9713  Loss_G: 1.3830  D(x): 0.4505    D(G(z)): 0.0411 / 0.3379
    [2/5][1100/1583]        Loss_D: 0.4030  Loss_G: 3.5259  D(x): 0.9146    D(G(z)): 0.2473 / 0.0391
    [2/5][1150/1583]        Loss_D: 0.6570  Loss_G: 3.4240  D(x): 0.9190    D(G(z)): 0.3983 / 0.0428
    [2/5][1200/1583]        Loss_D: 0.5348  Loss_G: 2.7974  D(x): 0.7759    D(G(z)): 0.2103 / 0.0794
    [2/5][1250/1583]        Loss_D: 1.3462  Loss_G: 6.3865  D(x): 0.9680    D(G(z)): 0.6793 / 0.0041
    [2/5][1300/1583]        Loss_D: 0.5062  Loss_G: 3.5325  D(x): 0.8559    D(G(z)): 0.2619 / 0.0396
    [2/5][1350/1583]        Loss_D: 0.5380  Loss_G: 2.5076  D(x): 0.8327    D(G(z)): 0.2679 / 0.1030
    [2/5][1400/1583]        Loss_D: 2.4783  Loss_G: 4.9395  D(x): 0.9873    D(G(z)): 0.8771 / 0.0124
    [2/5][1450/1583]        Loss_D: 1.3165  Loss_G: 1.3135  D(x): 0.3465    D(G(z)): 0.0300 / 0.3333
    [2/5][1500/1583]        Loss_D: 0.5369  Loss_G: 1.7358  D(x): 0.7299    D(G(z)): 0.1632 / 0.2160
    [2/5][1550/1583]        Loss_D: 0.6551  Loss_G: 2.4520  D(x): 0.7599    D(G(z)): 0.2811 / 0.1031
    [3/5][0/1583]   Loss_D: 0.5302  Loss_G: 2.4840  D(x): 0.7521    D(G(z)): 0.1851 / 0.1086
    [3/5][50/1583]  Loss_D: 0.6689  Loss_G: 1.6595  D(x): 0.6547    D(G(z)): 0.1665 / 0.2256
    [3/5][100/1583] Loss_D: 1.4652  Loss_G: 5.7589  D(x): 0.9731    D(G(z)): 0.7156 / 0.0055
    [3/5][150/1583] Loss_D: 1.1694  Loss_G: 3.5898  D(x): 0.8015    D(G(z)): 0.5530 / 0.0469
    [3/5][200/1583] Loss_D: 0.4797  Loss_G: 2.7986  D(x): 0.8388    D(G(z)): 0.2417 / 0.0747
    [3/5][250/1583] Loss_D: 1.2413  Loss_G: 0.8465  D(x): 0.4299    D(G(z)): 0.1788 / 0.4755
    [3/5][300/1583] Loss_D: 0.5862  Loss_G: 2.1054  D(x): 0.6507    D(G(z)): 0.0876 / 0.1494
    [3/5][350/1583] Loss_D: 0.6512  Loss_G: 3.5416  D(x): 0.8962    D(G(z)): 0.3791 / 0.0388
    [3/5][400/1583] Loss_D: 0.9218  Loss_G: 4.1735  D(x): 0.9286    D(G(z)): 0.5221 / 0.0221
    [3/5][450/1583] Loss_D: 1.3960  Loss_G: 1.0443  D(x): 0.3206    D(G(z)): 0.0806 / 0.4030
    [3/5][500/1583] Loss_D: 0.6472  Loss_G: 3.4090  D(x): 0.9329    D(G(z)): 0.3975 / 0.0477
    [3/5][550/1583] Loss_D: 0.5923  Loss_G: 3.8375  D(x): 0.9207    D(G(z)): 0.3622 / 0.0281
    [3/5][600/1583] Loss_D: 0.8760  Loss_G: 1.1667  D(x): 0.5115    D(G(z)): 0.0827 / 0.3558
    [3/5][650/1583] Loss_D: 0.5896  Loss_G: 2.9461  D(x): 0.8486    D(G(z)): 0.3092 / 0.0769
    [3/5][700/1583] Loss_D: 0.4034  Loss_G: 3.1982  D(x): 0.8826    D(G(z)): 0.2255 / 0.0520
    [3/5][750/1583] Loss_D: 0.6956  Loss_G: 2.0808  D(x): 0.6435    D(G(z)): 0.1724 / 0.1661
    [3/5][800/1583] Loss_D: 0.5283  Loss_G: 2.5050  D(x): 0.7743    D(G(z)): 0.2018 / 0.1069
    [3/5][850/1583] Loss_D: 0.4740  Loss_G: 2.3121  D(x): 0.7514    D(G(z)): 0.1404 / 0.1243
    [3/5][900/1583] Loss_D: 0.6058  Loss_G: 1.1781  D(x): 0.6669    D(G(z)): 0.1310 / 0.3433
    [3/5][950/1583] Loss_D: 2.2482  Loss_G: 6.1515  D(x): 0.9819    D(G(z)): 0.8542 / 0.0044
    [3/5][1000/1583]        Loss_D: 0.5434  Loss_G: 2.4503  D(x): 0.7466    D(G(z)): 0.1878 / 0.1079
    [3/5][1050/1583]        Loss_D: 2.3381  Loss_G: 6.4762  D(x): 0.9711    D(G(z)): 0.8559 / 0.0034
    [3/5][1100/1583]        Loss_D: 0.5287  Loss_G: 3.0149  D(x): 0.8721    D(G(z)): 0.2891 / 0.0686
    [3/5][1150/1583]        Loss_D: 0.5022  Loss_G: 2.4287  D(x): 0.7742    D(G(z)): 0.1918 / 0.1145
    [3/5][1200/1583]        Loss_D: 0.7414  Loss_G: 3.9821  D(x): 0.9148    D(G(z)): 0.4335 / 0.0260
    [3/5][1250/1583]        Loss_D: 0.5409  Loss_G: 3.1386  D(x): 0.8754    D(G(z)): 0.3015 / 0.0575
    [3/5][1300/1583]        Loss_D: 1.6427  Loss_G: 0.6510  D(x): 0.3559    D(G(z)): 0.2987 / 0.5683
    [3/5][1350/1583]        Loss_D: 0.7018  Loss_G: 2.0446  D(x): 0.7331    D(G(z)): 0.2818 / 0.1602
    [3/5][1400/1583]        Loss_D: 0.8138  Loss_G: 3.4080  D(x): 0.9069    D(G(z)): 0.4749 / 0.0453
    [3/5][1450/1583]        Loss_D: 0.5912  Loss_G: 1.8774  D(x): 0.6959    D(G(z)): 0.1564 / 0.1816
    [3/5][1500/1583]        Loss_D: 0.5367  Loss_G: 3.2584  D(x): 0.8608    D(G(z)): 0.2928 / 0.0505
    [3/5][1550/1583]        Loss_D: 0.7693  Loss_G: 3.0239  D(x): 0.7563    D(G(z)): 0.3310 / 0.0705
    [4/5][0/1583]   Loss_D: 0.6952  Loss_G: 2.4476  D(x): 0.7446    D(G(z)): 0.2802 / 0.1083
    [4/5][50/1583]  Loss_D: 1.4284  Loss_G: 0.4279  D(x): 0.3081    D(G(z)): 0.0288 / 0.6903
    [4/5][100/1583] Loss_D: 0.5811  Loss_G: 2.6915  D(x): 0.7891    D(G(z)): 0.2506 / 0.0899
    [4/5][150/1583] Loss_D: 0.7287  Loss_G: 2.8782  D(x): 0.9092    D(G(z)): 0.4322 / 0.0763
    [4/5][200/1583] Loss_D: 0.5332  Loss_G: 3.2461  D(x): 0.8934    D(G(z)): 0.3145 / 0.0512
    [4/5][250/1583] Loss_D: 0.7135  Loss_G: 1.8167  D(x): 0.6349    D(G(z)): 0.1689 / 0.1986
    [4/5][300/1583] Loss_D: 2.2007  Loss_G: 0.1039  D(x): 0.1665    D(G(z)): 0.0205 / 0.9102
    [4/5][350/1583] Loss_D: 0.4470  Loss_G: 2.9338  D(x): 0.8692    D(G(z)): 0.2353 / 0.0726
    [4/5][400/1583] Loss_D: 0.9442  Loss_G: 1.3627  D(x): 0.4642    D(G(z)): 0.0592 / 0.3174
    [4/5][450/1583] Loss_D: 0.5739  Loss_G: 2.4657  D(x): 0.8427    D(G(z)): 0.2993 / 0.1092
    [4/5][500/1583] Loss_D: 0.4289  Loss_G: 3.7944  D(x): 0.9367    D(G(z)): 0.2849 / 0.0287
    [4/5][550/1583] Loss_D: 0.5193  Loss_G: 2.6364  D(x): 0.8504    D(G(z)): 0.2701 / 0.0971
    [4/5][600/1583] Loss_D: 0.7456  Loss_G: 2.2069  D(x): 0.6755    D(G(z)): 0.2331 / 0.1450
    [4/5][650/1583] Loss_D: 0.6846  Loss_G: 1.6330  D(x): 0.5764    D(G(z)): 0.0644 / 0.2410
    [4/5][700/1583] Loss_D: 0.5622  Loss_G: 3.4119  D(x): 0.9035    D(G(z)): 0.3386 / 0.0425
    [4/5][750/1583] Loss_D: 0.6915  Loss_G: 1.6471  D(x): 0.7005    D(G(z)): 0.2239 / 0.2320
    [4/5][800/1583] Loss_D: 0.4859  Loss_G: 3.1402  D(x): 0.8198    D(G(z)): 0.2178 / 0.0553
    [4/5][850/1583] Loss_D: 0.6690  Loss_G: 3.0298  D(x): 0.8272    D(G(z)): 0.3319 / 0.0666
    [4/5][900/1583] Loss_D: 0.5096  Loss_G: 1.5814  D(x): 0.7263    D(G(z)): 0.1360 / 0.2495
    [4/5][950/1583] Loss_D: 0.9591  Loss_G: 5.0106  D(x): 0.9059    D(G(z)): 0.5209 / 0.0134
    [4/5][1000/1583]        Loss_D: 0.4626  Loss_G: 2.6274  D(x): 0.8418    D(G(z)): 0.2241 / 0.0909
    [4/5][1050/1583]        Loss_D: 0.4472  Loss_G: 3.1159  D(x): 0.8859    D(G(z)): 0.2549 / 0.0579
    [4/5][1100/1583]        Loss_D: 0.5172  Loss_G: 2.9177  D(x): 0.8418    D(G(z)): 0.2672 / 0.0674
    [4/5][1150/1583]        Loss_D: 0.8143  Loss_G: 4.0803  D(x): 0.9287    D(G(z)): 0.4732 / 0.0256
    [4/5][1200/1583]        Loss_D: 1.1907  Loss_G: 0.3028  D(x): 0.3789    D(G(z)): 0.0365 / 0.7761
    [4/5][1250/1583]        Loss_D: 0.4688  Loss_G: 2.2372  D(x): 0.7929    D(G(z)): 0.1814 / 0.1364
    [4/5][1300/1583]        Loss_D: 0.5055  Loss_G: 3.4458  D(x): 0.9366    D(G(z)): 0.3205 / 0.0423
    [4/5][1350/1583]        Loss_D: 0.4589  Loss_G: 2.5290  D(x): 0.7692    D(G(z)): 0.1492 / 0.1015
    [4/5][1400/1583]        Loss_D: 0.6898  Loss_G: 1.7355  D(x): 0.6498    D(G(z)): 0.1712 / 0.2210
    [4/5][1450/1583]        Loss_D: 1.0059  Loss_G: 4.5177  D(x): 0.9367    D(G(z)): 0.5494 / 0.0178
    [4/5][1500/1583]        Loss_D: 0.6115  Loss_G: 1.6072  D(x): 0.6410    D(G(z)): 0.1066 / 0.2485
    [4/5][1550/1583]        Loss_D: 0.6686  Loss_G: 1.9678  D(x): 0.6073    D(G(z)): 0.0854 / 0.1767


Results
-------

Finally, lets check out how we did. Here, we will look at three
different results. First, we will see how D and G’s losses changed
during training. Second, we will visualize G’s output on the fixed_noise
batch for every epoch. And third, we will look at a batch of real data
next to a batch of fake data from G.

**Loss versus training iteration**

Below is a plot of D & G’s losses versus training iterations.




.. code-block:: python


    plt.figure(figsize=(10,5))
    plt.title("Generator and Discriminator Loss During Training")
    plt.plot(G_losses,label="G")
    plt.plot(D_losses,label="D")
    plt.xlabel("iterations")
    plt.ylabel("Loss")
    plt.legend()
    plt.show()





.. image:: /beginner/images/sphx_glr_dcgan_faces_tutorial_002.png
    :class: sphx-glr-single-img




**Visualization of G’s progression**

Remember how we saved the generator’s output on the fixed_noise batch
after every epoch of training. Now, we can visualize the training
progression of G with an animation. Press the play button to start the
animation.




.. code-block:: python


    #%%capture
    fig = plt.figure(figsize=(8,8))
    plt.axis("off")
    ims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]
    ani = animation.ArtistAnimation(fig, ims, interval=1000, repeat_delay=1000, blit=True)

    HTML(ani.to_jshtml())





.. image:: /beginner/images/sphx_glr_dcgan_faces_tutorial_003.png
    :class: sphx-glr-single-img




**Real Images vs. Fake Images**

Finally, lets take a look at some real images and fake images side by
side.




.. code-block:: python


    # Grab a batch of real images from the dataloader
    real_batch = next(iter(dataloader))

    # Plot the real images
    plt.figure(figsize=(15,15))
    plt.subplot(1,2,1)
    plt.axis("off")
    plt.title("Real Images")
    plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=5, normalize=True).cpu(),(1,2,0)))

    # Plot the fake images from the last epoch
    plt.subplot(1,2,2)
    plt.axis("off")
    plt.title("Fake Images")
    plt.imshow(np.transpose(img_list[-1],(1,2,0)))
    plt.show()





.. image:: /beginner/images/sphx_glr_dcgan_faces_tutorial_004.png
    :class: sphx-glr-single-img




Where to Go Next
----------------

We have reached the end of our journey, but there are several places you
could go from here. You could:

-  Train for longer to see how good the results get
-  Modify this model to take a different dataset and possibly change the
   size of the images and the model architecture
-  Check out some other cool GAN projects
   `here <https://github.com/nashory/gans-awesome-applications>`__
-  Create GANs that generate
   `music <https://deepmind.com/blog/wavenet-generative-model-raw-audio/>`__



**Total running time of the script:** ( 28 minutes  45.769 seconds)


.. _sphx_glr_download_beginner_dcgan_faces_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dcgan_faces_tutorial.py <dcgan_faces_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dcgan_faces_tutorial.ipynb <dcgan_faces_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
