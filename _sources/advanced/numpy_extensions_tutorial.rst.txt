.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0699,  9.7489,  4.0512,  4.2000,  2.9460],
            [ 8.5263,  4.0035,  5.3292, 10.3830,  0.0731],
            [ 6.9175,  9.7117,  7.1791, 11.4043,  5.5412],
            [ 7.0225,  6.8187,  4.7498,  9.9721,  7.1132],
            [ 8.0653, 10.6737, 12.8065, 15.2961,  7.8051],
            [ 7.0225,  7.4425, 10.3558,  7.3704,  7.1132],
            [ 6.9175,  4.7838,  2.3590,  0.9976,  5.5412],
            [ 8.5263,  5.4291,  4.2299,  0.8619,  0.0731]],
           grad_fn=<BadFFTFunction>)
    tensor([[-1.6402,  0.4802,  0.4133,  0.6358,  1.6859, -0.2924,  0.9892,  0.1762],
            [ 0.9927, -0.6055, -0.1283,  0.1479, -0.0847,  0.6547, -1.0061, -1.6792],
            [-1.7690,  0.9525, -0.1380, -0.2956,  0.0771,  0.3459,  1.0716,  2.6777],
            [-0.4708, -1.5203, -0.1863,  1.1351,  0.9933, -0.6069, -0.4853, -1.5396],
            [-1.3648, -0.1290, -1.2790, -0.7389, -0.9701, -0.1718,  0.9583, -1.2091],
            [ 0.8116, -1.4092, -0.0143,  0.4348,  0.0256,  0.3777, -1.6671,  0.2694],
            [ 0.7313,  0.1131, -1.0930, -0.9744,  0.2777,  1.3229,  0.3608,  0.7935],
            [-0.2295, -1.0798,  0.0600, -0.4534,  0.5619, -0.1941, -0.9917,  1.8198]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4544,  1.7129,  1.2438],
            [ 0.7046, -1.0622,  0.9005],
            [-0.9541,  0.6242,  0.2591]], requires_grad=True), Parameter containing:
    tensor([[0.2420]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1534, -1.7014,  0.4798, -2.8111,  2.8001, -2.6415, -1.1847, -1.3785],
            [-0.6014, -0.9394,  1.9239,  2.3172, -1.5894,  0.3388, -1.0964, -1.7818],
            [-1.5128, -2.0101,  0.9326,  0.6270,  4.6564,  0.5244, -2.1880, -2.0350],
            [ 0.5866,  0.8601, -4.2270, -0.1436,  1.1795,  2.6304, -1.4349,  0.8751],
            [ 1.2248, -3.7790, -3.5907, -4.0408, -2.1844,  0.3562, -1.7977, -2.2862],
            [-3.7359,  2.9670, -5.8503, -2.5859, -5.5448, -0.9003, -1.3935,  2.0349],
            [-0.3513, -0.8256, -1.1168,  1.2357,  1.4116,  0.5662, -3.1334, -1.5069],
            [-2.1126, -2.4182,  3.1861, -2.1078,  2.6427,  2.5461,  3.7654,  2.4690]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5100,  2.4458,  4.5336,  5.2583,  0.4992, -4.6238, -4.9949, -1.2619,
              2.4629,  1.2567],
            [ 0.3926, -1.9699, -0.4016, -4.1537,  4.3359,  1.1409,  2.7715, -1.6728,
             -1.9122,  0.1682],
            [-2.0418, -0.5363, -2.4718,  6.5026, -1.9298,  2.9539, -4.7052, -0.2934,
              0.0902, -2.3286],
            [-0.1468, -0.8148, -2.9486, -2.3471, -1.2017, -3.5031, -0.6458, -5.6154,
              3.2020, -0.4968],
            [-0.6834, -4.0595, -3.3124, -0.6977,  2.0049, -2.2185, -3.8009,  2.3438,
             -3.1346, -0.4170],
            [-0.2712,  1.0875,  1.7860,  2.1879,  2.9613,  1.9415, -4.0244, -2.4885,
              3.9589,  0.8637],
            [ 1.0037, -1.6400, -4.9519, -0.0092,  0.9095, -1.7158,  0.6097, -0.9693,
             -4.0818, -1.3829],
            [-0.2958,  0.5674, -3.7925, -6.1541, -1.6676, -1.6599, -6.3942,  0.3589,
              5.2164,  0.4398],
            [ 1.8665, -2.8437,  1.9255, -1.9988,  0.4155, -1.0834, -0.0626,  1.6763,
             -2.1441,  0.7961],
            [-1.0109,  3.0467, -0.7181,  0.0057,  0.7428, -0.9721, -1.1395, -1.0708,
              0.9891,  0.3546]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.268 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
