.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.8447,  2.9845,  3.9855,  5.9262,  5.0303],
            [ 2.0466, 12.6587,  3.8816,  6.5485,  6.9165],
            [ 6.0306,  5.0775,  3.2226,  8.5737, 13.2027],
            [ 5.2034,  6.2652,  6.4257,  8.9279,  6.4082],
            [ 1.6897,  7.7118,  3.5136,  3.2514, 12.6256],
            [ 5.2034,  5.1307,  7.2739,  3.4549,  6.4082],
            [ 6.0306, 12.8091, 14.2339,  6.6738, 13.2027],
            [ 2.0466,  3.2095,  7.0940, 14.5321,  6.9165]],
           grad_fn=<BadFFTFunction>)
    tensor([[ 0.1259, -1.2804,  0.1868, -0.7255, -0.9514,  0.0739, -1.5115, -0.9122],
            [ 0.5455,  0.3821,  2.9172, -0.9297, -1.0972, -1.3557, -0.3691, -0.6707],
            [ 0.1685, -0.3409, -0.2985,  0.4854, -0.5082,  0.8503, -0.5480, -0.0658],
            [-0.3717,  0.1952, -0.4142, -0.0992, -1.2145,  0.0047, -0.4820, -0.3759],
            [ 0.0233,  0.8087, -2.6869,  0.4672, -2.1003,  1.2392,  1.0852, -0.2891],
            [-0.0658,  0.5105,  0.5952, -1.4119, -0.4627, -1.1264,  1.3107, -0.4761],
            [-1.8977, -0.3661, -0.2515,  0.8328,  0.5369, -0.9903,  0.5798,  0.9931],
            [ 0.4565, -0.8473, -2.0550,  0.6138,  0.5377,  1.1304, -0.7206, -0.2314]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1339,  0.5497,  0.3952],
            [-0.3527, -1.8927,  0.1550],
            [ 0.3141,  0.2977,  0.5596]], requires_grad=True), Parameter containing:
    tensor([[-0.5641]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7077,  2.5661,  6.5553,  0.8931,  2.2031, -0.2121, -2.0251, -4.3978],
            [-1.7202,  2.1307, -4.1044, -3.5510, -2.1986, -3.0868,  1.5266,  0.3470],
            [-0.6027, -1.2804,  1.5947, -2.4803,  0.8370, -0.4130, -1.6824, -5.0059],
            [ 1.0441,  0.2371, -1.6991, -3.4752, -2.4711, -3.4556,  1.5796, -0.0212],
            [-2.9616, -0.7421, -1.1490, -0.6841,  3.7753,  1.7711,  1.9149,  1.6942],
            [ 3.3817,  2.9777, -1.1285, -2.2782, -4.0493, -3.0246, -1.4951, -0.8876],
            [-4.0290, -2.7700,  0.1150,  0.4851,  1.1986,  1.2405,  1.0274,  0.8197],
            [ 2.1619,  4.4083, -1.1169, -2.7049, -1.7251, -0.3279, -4.1654, -5.0145]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0409,  0.0496,  0.6168,  0.3438, -0.3785,  0.9761, -0.2763, -0.7967,
             -0.3427, -0.1538],
            [-0.0572, -1.3092, -0.8225,  0.7634, -0.4261, -2.1304,  3.2157,  1.0408,
              1.8559,  0.3157],
            [ 0.2248,  0.5637, -2.4095,  1.0794,  0.1573, -0.2151,  0.8367, -4.7274,
             -1.3241,  0.1657],
            [-0.1219,  0.2814,  0.6331,  2.7953, -0.7154, -2.0456,  1.7525, -0.2493,
             -0.6526, -0.0427],
            [ 0.0952, -0.2250, -1.6235, -1.4405,  1.3835, -0.0704, -0.0381, -0.7397,
              3.5669,  0.3453],
            [ 0.0557,  1.3285,  0.5995, -1.5751,  0.2716,  2.2687, -0.2059,  2.9164,
             -1.0724, -0.9938],
            [-0.4590, -0.9156, -0.6613, -1.2077, -0.3212, -2.7424,  0.8989, -4.6774,
              1.3616,  0.9639],
            [-0.1247, -0.4371,  2.4040,  0.5054,  0.5697,  1.3998, -1.2020, -1.5723,
             -2.5926,  0.2982],
            [ 0.0592, -0.8002,  1.0470, -1.3283,  1.5380,  1.7102,  1.0456,  6.1200,
             -1.4122,  1.0085],
            [ 0.1503, -0.0383,  0.2650, -0.4139, -0.1961, -0.7906, -1.4381, -0.8013,
             -1.3772,  0.3787]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.280 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
