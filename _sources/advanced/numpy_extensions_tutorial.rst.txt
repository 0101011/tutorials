.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic` [https://github.com/adam-dziedzic](https://github.com/adam-dziedzic)

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation



.. code-block:: python


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**



.. code-block:: python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):

        def forward(self, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        def backward(self, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction()(input)







**Example usage of the created layer:**



.. code-block:: python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2063,  2.1281,  9.3716,  4.3125, 14.3084],
            [ 5.4116,  2.0451,  9.8340,  4.4986, 11.8115],
            [ 2.7802,  1.7508,  2.1333, 10.4351,  8.5661],
            [ 4.9489, 12.3668,  8.5432, 12.4528,  6.2433],
            [ 8.0724,  6.7276, 19.1868,  8.6969,  2.1753],
            [ 4.9489,  6.5954,  2.2161,  9.1821,  6.2433],
            [ 2.7802,  4.6409,  4.4770,  7.6981,  8.5661],
            [ 5.4116, 14.1637,  2.9015,  3.1599, 11.8115]],
           grad_fn=<BadFFTFunction>)
    tensor([[-0.1521,  0.1704, -0.2507, -0.1126,  0.1348,  0.2287,  0.7808, -0.8782],
            [-1.3521,  0.3256, -0.3002,  0.1858, -0.4719,  2.0851, -0.1960, -1.3222],
            [ 0.4122, -0.0244, -1.3658, -1.0014, -0.8242, -0.9544,  0.5115,  1.7205],
            [ 0.5839,  0.5276,  0.7526, -2.3951,  1.4337,  0.4613,  0.0808, -1.4045],
            [ 2.4295, -0.4297, -0.3624,  1.0616, -0.4072, -1.5419,  0.1146, -0.8925],
            [ 0.0916,  0.7630,  1.6444, -1.4561,  0.2571,  0.7956,  0.8610,  0.3699],
            [-0.6417, -0.1904,  0.7362,  0.1439,  1.6191, -2.2015, -0.0803, -0.6856],
            [ 0.6546,  0.4356,  1.4283,  1.0452, -1.0407,  0.9949,  1.1759, -1.8755]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.



.. code-block:: python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**



.. code-block:: python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4474, -0.1835,  0.5311],
            [-1.5129,  1.8408,  0.0994],
            [ 0.3166, -1.3757,  0.2105]], requires_grad=True), Parameter containing:
    tensor([[0.3153]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.8821, -1.5232, -2.4458,  0.2216,  0.8773,  1.6001, -1.2280,  2.9864],
            [-6.4409,  6.7667,  2.8907,  0.0303, -0.6340, -0.0839,  0.6839, -3.1409],
            [ 5.0183, -3.8194,  2.3459,  1.3257,  1.0271,  0.9387,  0.7774, -2.8897],
            [-2.5908, -2.8501, -4.6706,  6.2612,  0.7430, -2.2038, -0.0046,  2.0859],
            [ 0.9966, -1.6939,  2.0275, -5.2481,  2.9646,  3.0084, -4.6431,  3.1134],
            [ 2.2046,  3.7042, -1.9004, -1.4435,  3.6063,  0.1178,  1.4391,  0.6843],
            [-2.0348,  0.7683,  3.7980,  2.4800, -2.4550, -0.4821,  0.3748,  0.8060],
            [ 4.6224, -0.3573, -1.3945,  5.1357, -2.4860,  1.0990, -0.4922, -0.0475]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3729, -0.0211, -0.2984,  0.0960, -0.5607,  0.4835,  0.1459, -1.1635,
              1.1346, -0.8692],
            [ 1.2156, -1.1008, -0.8160, -1.5755,  3.6819, -2.5832, -2.7142,  5.5391,
             -3.2041,  0.6091],
            [-0.3491,  1.7620, -1.5715,  2.5810, -3.6644,  2.8345, -1.1997, -5.7486,
              4.2568, -0.1094],
            [ 0.6553, -2.4027,  2.7171, -3.3427,  2.0697,  1.4399,  1.1894, -3.3677,
             -1.3288, -0.0247],
            [ 1.5038,  1.8986, -3.8589,  4.1123, -2.4637, -3.0748,  2.5167,  3.2729,
             -0.9003,  0.0829],
            [-4.3431,  5.7963,  2.4706, -3.9707,  2.5494,  2.9410, -7.7668,  0.0134,
              2.2497, -0.7268],
            [ 0.9251, -3.4494,  0.1929,  1.5630,  0.6298, -1.2177,  0.7264,  0.1134,
             -1.9850, -0.2259],
            [-1.0282,  1.1842, -1.8949,  0.6768, -1.3067,  1.6424,  1.6773, -1.7252,
              1.0606, -0.2037],
            [ 2.2591, -3.7140,  4.5367, -4.9131, -0.4628,  2.1681, -0.6627, -0.6266,
              0.5951, -0.0493],
            [-0.4550,  2.1027, -1.5585,  3.2663, -0.6262, -1.2560,  1.1233,  0.1602,
             -0.2166,  0.0267]])


**Check the gradients:**



.. code-block:: python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True


**Total running time of the script:** ( 0 minutes  0.286 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
