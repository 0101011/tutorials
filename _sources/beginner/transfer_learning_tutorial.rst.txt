

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning tutorial
==========================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train your network using
transfer learning. You can read more about the transfer learning at `cs231n
notes <http://cs231n.github.io/transfer-learning/>`__

Quoting this notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios looks as follows:

-  **Finetuning the convnet**: Instead of random initializaion, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.




.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    from torch.autograd import Variable
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os

    plt.ion()   # interactive mode







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.



.. code-block:: python


    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomSizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Scale(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    use_gpu = torch.cuda.is_available()







Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.



.. code-block:: python


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :align: center




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving the best model

In the following, parameter ``scheduler`` is an LR scheduler object from
``torch.optim.lr_scheduler``.



.. code-block:: python



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        best_model_wts = model.state_dict()
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    scheduler.step()
                    model.train(True)  # Set model to training mode
                else:
                    model.train(False)  # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for data in dataloders[phase]:
                    # get the inputs
                    inputs, labels = data

                    # wrap them in Variable
                    if use_gpu:
                        inputs = Variable(inputs.cuda())
                        labels = Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.data[0]
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects / dataset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model_wts = model.state_dict()

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))

        # load best model weights
        model.load_state_dict(best_model_wts)
        return model








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images




.. code-block:: python


    def visualize_model(model, num_images=6):
        images_so_far = 0
        fig = plt.figure()

        for i, data in enumerate(dataloders['val']):
            inputs, labels = data
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)

            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    return







Finetuning the convnet
----------------------

Load a pretrained model and reset final fully connected layer.




.. code-block:: python


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_ft = model_ft.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)







Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.




.. code-block:: python


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    train Loss: 0.1487 Acc: 0.7254
    val Loss: 0.0760 Acc: 0.8758

    Epoch 1/24
    ----------
    train Loss: 0.1251 Acc: 0.7910
    val Loss: 0.1226 Acc: 0.8562

    Epoch 2/24
    ----------
    train Loss: 0.1536 Acc: 0.7295
    val Loss: 0.0781 Acc: 0.8758

    Epoch 3/24
    ----------
    train Loss: 0.1493 Acc: 0.7541
    val Loss: 0.0763 Acc: 0.8824

    Epoch 4/24
    ----------
    train Loss: 0.1529 Acc: 0.7418
    val Loss: 0.0667 Acc: 0.8758

    Epoch 5/24
    ----------
    train Loss: 0.1610 Acc: 0.7623
    val Loss: 0.0673 Acc: 0.8889

    Epoch 6/24
    ----------
    train Loss: 0.0947 Acc: 0.8402
    val Loss: 0.0745 Acc: 0.8889

    Epoch 7/24
    ----------
    train Loss: 0.0934 Acc: 0.8279
    val Loss: 0.0683 Acc: 0.9085

    Epoch 8/24
    ----------
    train Loss: 0.0902 Acc: 0.8238
    val Loss: 0.0984 Acc: 0.9150

    Epoch 9/24
    ----------
    train Loss: 0.0713 Acc: 0.8689
    val Loss: 0.0612 Acc: 0.9216

    Epoch 10/24
    ----------
    train Loss: 0.0651 Acc: 0.8852
    val Loss: 0.0642 Acc: 0.9216

    Epoch 11/24
    ----------
    train Loss: 0.0576 Acc: 0.9098
    val Loss: 0.0614 Acc: 0.9216

    Epoch 12/24
    ----------
    train Loss: 0.0751 Acc: 0.8607
    val Loss: 0.0649 Acc: 0.8954

    Epoch 13/24
    ----------
    train Loss: 0.0697 Acc: 0.8852
    val Loss: 0.0684 Acc: 0.9150

    Epoch 14/24
    ----------
    train Loss: 0.0791 Acc: 0.8607
    val Loss: 0.0632 Acc: 0.9085

    Epoch 15/24
    ----------
    train Loss: 0.0879 Acc: 0.8566
    val Loss: 0.0675 Acc: 0.9020

    Epoch 16/24
    ----------
    train Loss: 0.0845 Acc: 0.8238
    val Loss: 0.0657 Acc: 0.9020

    Epoch 17/24
    ----------
    train Loss: 0.0652 Acc: 0.9016
    val Loss: 0.0660 Acc: 0.8954

    Epoch 18/24
    ----------
    train Loss: 0.0669 Acc: 0.8975
    val Loss: 0.0626 Acc: 0.9150

    Epoch 19/24
    ----------
    train Loss: 0.0588 Acc: 0.9057
    val Loss: 0.0663 Acc: 0.9150

    Epoch 20/24
    ----------
    train Loss: 0.0580 Acc: 0.9098
    val Loss: 0.0644 Acc: 0.9150

    Epoch 21/24
    ----------
    train Loss: 0.0799 Acc: 0.8443
    val Loss: 0.0599 Acc: 0.9020

    Epoch 22/24
    ----------
    train Loss: 0.0793 Acc: 0.8402
    val Loss: 0.0904 Acc: 0.9020

    Epoch 23/24
    ----------
    train Loss: 0.0748 Acc: 0.8607
    val Loss: 0.0688 Acc: 0.8824

    Epoch 24/24
    ----------
    train Loss: 0.0686 Acc: 0.8689
    val Loss: 0.0606 Acc: 0.9281

    Training complete in 0m 49s
    Best val Acc: 0.928105



.. code-block:: python


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :align: center




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_conv = model_conv.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opoosed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    train Loss: 0.1490 Acc: 0.7131
    val Loss: 0.0566 Acc: 0.9346

    Epoch 1/24
    ----------
    train Loss: 0.1456 Acc: 0.7500
    val Loss: 0.1370 Acc: 0.7255

    Epoch 2/24
    ----------
    train Loss: 0.1836 Acc: 0.6762
    val Loss: 0.0497 Acc: 0.9346

    Epoch 3/24
    ----------
    train Loss: 0.1030 Acc: 0.8156
    val Loss: 0.0614 Acc: 0.9346

    Epoch 4/24
    ----------
    train Loss: 0.1124 Acc: 0.8402
    val Loss: 0.0622 Acc: 0.9150

    Epoch 5/24
    ----------
    train Loss: 0.0866 Acc: 0.8279
    val Loss: 0.0519 Acc: 0.9477

    Epoch 6/24
    ----------
    train Loss: 0.1040 Acc: 0.8279
    val Loss: 0.0600 Acc: 0.8954

    Epoch 7/24
    ----------
    train Loss: 0.0780 Acc: 0.8525
    val Loss: 0.0603 Acc: 0.9020

    Epoch 8/24
    ----------
    train Loss: 0.0892 Acc: 0.8402
    val Loss: 0.0562 Acc: 0.9150

    Epoch 9/24
    ----------
    train Loss: 0.0884 Acc: 0.8443
    val Loss: 0.0516 Acc: 0.9281

    Epoch 10/24
    ----------
    train Loss: 0.0835 Acc: 0.8689
    val Loss: 0.0524 Acc: 0.9216

    Epoch 11/24
    ----------
    train Loss: 0.0913 Acc: 0.8484
    val Loss: 0.0545 Acc: 0.9150

    Epoch 12/24
    ----------
    train Loss: 0.0907 Acc: 0.8279
    val Loss: 0.0647 Acc: 0.9216

    Epoch 13/24
    ----------
    train Loss: 0.0738 Acc: 0.8975
    val Loss: 0.0569 Acc: 0.9150

    Epoch 14/24
    ----------
    train Loss: 0.0874 Acc: 0.8730
    val Loss: 0.0495 Acc: 0.9216

    Epoch 15/24
    ----------
    train Loss: 0.0930 Acc: 0.8361
    val Loss: 0.0609 Acc: 0.9216

    Epoch 16/24
    ----------
    train Loss: 0.0867 Acc: 0.8525
    val Loss: 0.0634 Acc: 0.9085

    Epoch 17/24
    ----------
    train Loss: 0.0875 Acc: 0.8443
    val Loss: 0.0503 Acc: 0.9216

    Epoch 18/24
    ----------
    train Loss: 0.0957 Acc: 0.8156
    val Loss: 0.0527 Acc: 0.9346

    Epoch 19/24
    ----------
    train Loss: 0.1084 Acc: 0.7869
    val Loss: 0.0572 Acc: 0.9150

    Epoch 20/24
    ----------
    train Loss: 0.0678 Acc: 0.8893
    val Loss: 0.0504 Acc: 0.9216

    Epoch 21/24
    ----------
    train Loss: 0.0933 Acc: 0.8566
    val Loss: 0.0609 Acc: 0.9281

    Epoch 22/24
    ----------
    train Loss: 0.0883 Acc: 0.8197
    val Loss: 0.0501 Acc: 0.9281

    Epoch 23/24
    ----------
    train Loss: 0.0756 Acc: 0.8770
    val Loss: 0.0494 Acc: 0.9412

    Epoch 24/24
    ----------
    train Loss: 0.0823 Acc: 0.8484
    val Loss: 0.0547 Acc: 0.9281

    Training complete in 0m 24s
    Best val Acc: 0.947712



.. code-block:: python


    visualize_model(model_conv)

    plt.ioff()
    plt.show()



.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :align: center




**Total running time of the script:** ( 1 minutes  17.484 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
